From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 29 May 2024 23:48:40 +0900
Subject: [PATCH] Tick chunks fully async


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index 9c9fa516d451d67d8ed6c1721766572ed43c8a9e..fb56ba10568e8c08ad4320862aecc8756d8fcdba 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -1,6 +1,7 @@
 package io.multipaper.shreddedpaper.region;
 
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQueue;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionTicker;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
@@ -29,10 +30,12 @@ public class LevelChunkRegion {
     public final LongLinkedOpenHashSet unloadQueue = new LongLinkedOpenHashSet();
     public final List<TickingBlockEntity> tickingBlockEntities = new ReferenceArrayList<>();
     public final List<TickingBlockEntity> pendingBlockEntityTickers = new ReferenceArrayList<>();
+    private boolean removed = false;
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
         this.regionPos = regionPos;
+        ShreddedPaperRegionTicker.scheduleRegion(level, this);
     }
 
     public synchronized void add(LevelChunk levelChunk) {
@@ -119,4 +122,12 @@ public class LevelChunkRegion {
                 && players.isEmpty()
                 && unloadQueue.isEmpty();
     }
+
+    public void setRemoved() {
+        removed = true;
+    }
+
+    public boolean isRemoved() {
+        return removed;
+    }
 }
diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
index f6ccfb44265505042b210c61e59688a3450886d9..c23b9416a89b1b616eed7cff7b7f325d0006df0d 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
@@ -44,6 +44,8 @@ public class LevelChunkRegionMap {
             if (!region.isEmpty()) {
                 // Guess this region has been modified by another thread, re-add it
                 regions.put(regionPos.longKey, region);
+            } else {
+                region.setRemoved();
             }
         });
     }
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index 6c684c701cdae2c87a553fdf01291800d5918279..30cfac48969a8789233eb10d5cf005c946cc5945 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -21,6 +21,8 @@ import java.util.concurrent.CompletableFuture;
 public class ShreddedPaperChunkTicker {
 
     public static void tickChunks(ServerLevel level, NaturalSpawner.SpawnState spawnercreature_d) {
+        if (true) return; // ShreddedPaper - we tick chunks fully async now
+
         List<CompletableFuture<Void>> futures = new ArrayList<>();
 
         MinecraftServer.getServer().executeMidTickTasks();
@@ -46,7 +48,7 @@ public class ShreddedPaperChunkTicker {
         });
     }
 
-    private static void _tickRegion(ServerLevel level, LevelChunkRegion region, NaturalSpawner.SpawnState spawnercreature_d) {
+    static void _tickRegion(ServerLevel level, LevelChunkRegion region, NaturalSpawner.SpawnState spawnercreature_d) { // ShreddedPaper - make public
         if (!(ShreddedPaperTickThread.isShreddedPaperTickThread())) {
             throw new IllegalStateException("Ticking region " + level.convertable.getLevelId() + " " + region.getRegionPos() + " outside of ShreddedPaperTickThread!");
         }
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperRegionTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperRegionTicker.java
new file mode 100644
index 0000000000000000000000000000000000000000..1951fa500ed655f3b7bad419aaee59c0852d3138
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperRegionTicker.java
@@ -0,0 +1,106 @@
+package io.multipaper.shreddedpaper.threading;
+
+import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.LevelChunkRegion;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
+
+public class ShreddedPaperRegionTicker {
+
+    private static final int RETRY_TIME_NANOS = 1_000_000;
+    private static ShreddedPaperRegionTickerFactory factory = new ShreddedPaperRegionTickerFactory();
+
+    protected final ServerLevel level;
+    protected final LevelChunkRegion region;
+    private long thisTickTimeNanos = System.nanoTime();
+    private long thisTick = MinecraftServer.currentTickLong;
+
+    public static void setFactory(ShreddedPaperRegionTickerFactory factory) {
+        ShreddedPaperRegionTicker.factory = factory;
+    }
+
+    public static void scheduleRegion(ServerLevel level, LevelChunkRegion region) {
+        factory.scheduleRegion(level, region);
+    }
+
+    public static CompletableFuture<Void> scheduleTask(long timeNanos) {
+        return factory.scheduleTask(timeNanos);
+    }
+
+    public static class ShreddedPaperRegionTickerFactory {
+        void scheduleRegion(ServerLevel level, LevelChunkRegion region) {
+            new ShreddedPaperRegionTicker(level, region).scheduleNextTick();
+        }
+
+        CompletableFuture<Void> scheduleTask(long timeNanos) {
+            CompletableFuture<Void> future = new CompletableFuture<>();
+            ShreddedPaperTickThread.getExecutor().schedule(() -> {
+                future.complete(null);
+            }, timeNanos, TimeUnit.NANOSECONDS);
+            return future;
+        }
+    }
+
+    public ShreddedPaperRegionTicker(ServerLevel level, LevelChunkRegion region) {
+        this.level = level;
+        this.region = region;
+    }
+
+    public void schedule(long timeNanos) {
+        ShreddedPaperTickThread.getExecutor().schedule(this::tick, timeNanos, TimeUnit.NANOSECONDS);
+    }
+
+    public void scheduleNextTick() {
+        nextTick();
+        schedule(Math.max(thisTickTimeNanos - System.nanoTime(), RETRY_TIME_NANOS));
+    }
+
+    public void scheduleRetry() {
+        thisTickTimeNanos += RETRY_TIME_NANOS; // Make us run the tick a bit later usually to avoid whatever forced us to retry
+        schedule(RETRY_TIME_NANOS);
+    }
+
+    public void tick() {
+        if (region.isRemoved() || MinecraftServer.getServer().isStopped()) {
+            return;
+        }
+
+        if (thisTick > MinecraftServer.currentTickLong) {
+            // Waiting for next tick...
+            scheduleRetry();
+            return;
+        }
+
+        boolean success = level.chunkScheduler.getRegionLocker().tryLockNow(region.getRegionPos(), () -> {
+            try {
+                ShreddedPaperChunkTicker._tickRegion(level, region, level.getChunkSource().getLastSpawnState());
+            } catch (Throwable t) {
+                LogUtils.getClassLogger().error("Exception ticking region {}", region.getRegionPos(), t);
+                MinecraftServer.chunkSystemCrash = new RuntimeException("Ticking thread crash while ticking region " + region.getRegionPos(), t);
+                if (t instanceof Error error) {
+                    throw error;
+                }
+            }
+        });
+
+        if (!success) {
+            scheduleRetry();
+            return;
+        }
+
+        scheduleNextTick();
+    }
+
+    public void nextTick() {
+        thisTickTimeNanos = Math.max(System.nanoTime(), thisTickTimeNanos + nanosPerTick());
+        thisTick++;
+    }
+
+    public long nanosPerTick() {
+        return MinecraftServer.getServer().tickRateManager().nanosecondsPerTick();
+    }
+
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java
index 3949e39afcf36c4c5012e157ce95fd4d873126b5..665960a3604ab5d5610dcc1fb6484e6a92330eef 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java
@@ -17,6 +17,8 @@ public class ShreddedPaperTickThread extends TickThread {
 
     private static final ScheduledThreadPoolExecutor executor;
 
+    private static final ThreadLocal<Boolean> isTickThread = ThreadLocal.withInitial(() -> false);
+
     static {
         int threadCount = ShreddedPaperConfiguration.get().multithreading.threadCount;
 
@@ -33,9 +35,13 @@ public class ShreddedPaperTickThread extends TickThread {
         super(run, String.format(name, ID_GENERATOR.incrementAndGet()));
     }
 
+    public static void setThisThreadAsTickThread() {
+        isTickThread.set(true);
+    }
+
     public static boolean isShreddedPaperTickThread() {
         // Use this method to check if it's a shreddedpaper tick thread, to ensure future potential support for VirtualThreads
-        return Thread.currentThread() instanceof ShreddedPaperTickThread;
+        return Thread.currentThread() instanceof ShreddedPaperTickThread || isTickThread.get();
     }
 
     static ScheduledThreadPoolExecutor getExecutor() {
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/VirtualThreadRegionTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/VirtualThreadRegionTicker.java
new file mode 100644
index 0000000000000000000000000000000000000000..9cec4fe1454640e763e204f707711bfd12984bbf
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/VirtualThreadRegionTicker.java
@@ -0,0 +1,64 @@
+package io.multipaper.shreddedpaper.threading;
+
+import io.multipaper.shreddedpaper.region.LevelChunkRegion;
+import net.minecraft.server.level.ServerLevel;
+
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.locks.LockSupport;
+
+public class VirtualThreadRegionTicker extends ShreddedPaperRegionTicker {
+
+    public static class VirtualThreadRegionTickerFactory extends ShreddedPaperRegionTickerFactory {
+        @Override
+        void scheduleRegion(ServerLevel level, LevelChunkRegion region) {
+            new VirtualThreadRegionTicker(level, region).scheduleNextTick();
+        }
+
+        @Override
+        CompletableFuture<Void> scheduleTask(long timeNanos) {
+            CompletableFuture<Void> future = new CompletableFuture<>();
+            Thread.ofVirtual().name("Scheduled Task Delayer").start(() -> {
+                LockSupport.parkNanos(timeNanos);
+                future.complete(null);
+            });
+            return future;
+        }
+    }
+
+    private long nextTimeNanos = -1;
+    private Thread virtualThread;
+
+    public VirtualThreadRegionTicker(ServerLevel level, LevelChunkRegion region) {
+        super(level, region);
+    }
+
+    @Override
+    public void schedule(long timeNanos) {
+        nextTimeNanos = System.nanoTime() + timeNanos;
+
+        if (virtualThread == null) startThread();
+    }
+
+    private void startThread() {
+        virtualThread = Thread.ofVirtual()
+                .name("tickthread-" + level.convertable.getLevelId() + "-region." + region.getRegionPos().x + "." + region.getRegionPos().z)
+                .inheritInheritableThreadLocals(false)
+                .start(this::run);
+    }
+
+    private void run() {
+        ShreddedPaperTickThread.setThisThreadAsTickThread();
+
+        while (nextTimeNanos > 0) {
+            long waitTime = Math.max(nextTimeNanos - System.nanoTime(), 1);
+            nextTimeNanos = -1; // Reset so that we know if it's been rescheduled or not
+
+            LockSupport.parkNanos(waitTime);
+
+            tick();
+        }
+
+        virtualThread = null;
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index 645e39222d81a5049888c86881ee381310fa7060..1346218abf884d9888e5bace43c2631591f06c89 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -1,5 +1,6 @@
 package io.papermc.paper.util;
 
+import io.multipaper.shreddedpaper.threading.ShreddedPaperTickThread;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
@@ -112,7 +113,7 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThread() {
-        return Thread.currentThread() instanceof TickThread;
+        return Thread.currentThread() instanceof TickThread || ShreddedPaperTickThread.isShreddedPaperTickThread(); // ShreddedPaper - virtual thread support
     }
 
     public static boolean isShutdownThread() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 75933f0cb23d7b26b262111376816a40a87c61fe..7af5784d7b7e2f2345903bc17a4dc29ee1e026af 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,7 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionTicker;
 import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
@@ -47,6 +48,7 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -1412,8 +1414,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     protected void waitUntilNextTick() {
         //this.executeAll(); // Paper - move this into the tick method for timings
+        CompletableFuture<Void> workerThreadSync = ShreddedPaperRegionTicker.scheduleTask(this.nextTickTimeNanos - Util.getNanos()); // ShreddedPaper - ensure tick threads aren't overwhelmed
         this.managedBlock(() -> {
-            return !this.canSleepForTickNoOversleep(); // Paper - move oversleep into full server tick
+            return !this.canSleepForTickNoOversleep() && workerThreadSync.isDone(); // Paper - move oversleep into full server tick // ShreddedPaper - ensure tick threads aren't overwhelmed
         });
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 419742f225a63a14c987dcc926997953d605faf2..e12486fb33e2059cf602e895fcacfa441f2addae 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -537,9 +537,9 @@ public class ServerChunkCache extends ChunkSource {
                         }
                         // Paper end - per player mob spawning backoff
                     }
-                    spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true);
+                    spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.entityTickList.getAll(), this::getFullChunk, null, true); // ShreddedPaper - use thread-safe entity iterator
                 } else {
-                    spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false);
+                    spawnercreature_d = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.entityTickList.getAll(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false); // ShreddedPaper - use thread-safe entity iterator
                 }
                 // Paper end - Optional per player mob spawns
                 // this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings // Purpur
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index bf2e3885226dfe2ae6dd9340bd4371ad5c072e75..fd1c7d19c98fe1b4706bfc5d663b1735818a67c4 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level;
 
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index 951ff458efa225d814287bf83ed55cf759abad4a..9f2841c9e589d88feb396dcee4b70ebbc971839a 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -1,30 +1,37 @@
 package net.minecraft.world.level.entity;
 
 import io.papermc.paper.chunk.system.entity.EntityLookup;
+import io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet;
 import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.Entity;
+import org.jetbrains.annotations.NotNull;
 
 public class EntityTickList {
-    private final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<Entity> entities = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(true); // Paper - rewrite this, always keep this updated - why would we EVER tick an entity that's not ticking?
+    // private final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<Entity> entities = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(true); // Paper - rewrite this, always keep this updated - why would we EVER tick an entity that's not ticking? // ShreddedPaper
+    private final Set<Entity> entities = ConcurrentHashMap.newKeySet(); // ShreddedPaper
 
     private void ensureActiveIsNotIterated() {
         // Paper - replace with better logic, do not delay removals
     }
 
     public void add(Entity entity) {
-        if (true) return; // ShreddedPaper - disable the entity tick list
         io.papermc.paper.util.TickThread.ensureTickThread("Asynchronous entity ticklist addition"); // Paper
         this.ensureActiveIsNotIterated();
         this.entities.add(entity); // Paper - replace with better logic, do not delay removals/additions
     }
 
     public void remove(Entity entity) {
-        if (true) return; // ShreddedPaper - disable the entity tick list
         io.papermc.paper.util.TickThread.ensureTickThread("Asynchronous entity ticklist removal"); // Paper
         this.ensureActiveIsNotIterated();
         this.entities.remove(entity); // Paper - replace with better logic, do not delay removals/additions
@@ -41,14 +48,20 @@ public class EntityTickList {
         // Paper start - replace with better logic, do not delay removals/additions
         // To ensure nothing weird happens with dimension travelling, do not iterate over new entries...
         // (by dfl iterator() is configured to not iterate over new entries)
-        io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Entity> iterator = this.entities.iterator();
-        try {
-            while (iterator.hasNext()) {
-                action.accept(iterator.next());
-            }
-        } finally {
-            iterator.finishedIterating();
-        }
+        // io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator<Entity> iterator = this.entities.iterator();
+        // try {
+        //     while (iterator.hasNext()) {
+        //         action.accept(iterator.next());
+        //     }
+        // } finally {
+        //     iterator.finishedIterating();
+        // }
         // Paper end - replace with better logic, do not delay removals/additions
     }
+
+    // ShreddedPaper start - iterator
+    public Iterable<Entity> getAll() {
+        return this.entities;
+    }
+    // ShreddedPaper end
 }
