From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 5 Jun 2024 20:01:02 +0900
Subject: [PATCH] Block events


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index f01db70a4dcb249b5cbe5764257c480e3c630a8d..99680a983da4c64b709cae624348992cdc83e7f3 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -4,20 +4,25 @@ import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQu
 import io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.BlockEventData;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
 
 public class LevelChunkRegion {
 
@@ -33,6 +38,7 @@ public class LevelChunkRegion {
     public final List<TickingBlockEntity> tickingBlockEntities = new ReferenceArrayList<>();
     public final List<TickingBlockEntity> pendingBlockEntityTickers = new ReferenceArrayList<>();
     private final ObjectOpenHashSet<Mob> navigatingMobs = new ObjectOpenHashSet<>();
+    private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents = new ObjectLinkedOpenHashSet<>();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
@@ -161,6 +167,26 @@ public class LevelChunkRegion {
         toRun.forEach(DelayedTask::run);
     }
 
+    public synchronized void addBlockEvent(BlockEventData blockEvent) {
+        this.blockEvents.add(blockEvent);
+    }
+
+    public synchronized void addAllBlockEvents(Collection<BlockEventData> blockEvents) {
+        this.blockEvents.addAll(blockEvents);
+    }
+
+    public boolean hasBlockEvents() {
+        return !this.blockEvents.isEmpty();
+    }
+
+    public synchronized BlockEventData removeFirstBlockEvent() {
+        return this.blockEvents.removeFirst();
+    }
+
+    public synchronized void removeBlockEventsIf(Predicate<BlockEventData> predicate) {
+        this.blockEvents.removeIf(predicate);
+    }
+
     public boolean isEmpty() {
         return levelChunks.isEmpty()
                 && tickingEntities.size() == 0
@@ -170,6 +196,7 @@ public class LevelChunkRegion {
                 && unloadQueue.isEmpty()
                 && trackedEntities.isEmpty()
                 && navigatingMobs.isEmpty()
+                && blockEvents.isEmpty()
                 ;
     }
 }
diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
index 80acf2a25921c7b674d0758c0c29a7352746726b..2b88bc33446fdb6fbbdaf0ac170a9ac215df6828 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
@@ -6,10 +6,12 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.BlockEventData;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
 import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionLocker;
 import io.multipaper.shreddedpaper.util.SimpleStampedLock;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -199,6 +201,24 @@ public class LevelChunkRegionMap {
         }
     }
 
+    public void addBlockEvent(BlockEventData blockEvent) {
+        getOrCreate(RegionPos.forBlockPos(blockEvent.pos())).addBlockEvent(blockEvent);
+    }
+
+    public void forEachRegionInBoundingBox(BoundingBox box, Consumer<LevelChunkRegion> consumer) {
+        RegionPos minPos = RegionPos.forBlockPos(box.minX(), box.minZ(), box.minZ());
+        RegionPos maxPos = RegionPos.forBlockPos(box.maxX(), box.maxZ(), box.maxZ());
+
+        for (int x = minPos.x; x <= maxPos.x; x++) {
+            for (int z = minPos.z; z <= maxPos.z; z++) {
+                LevelChunkRegion region = get(new RegionPos(x, z));
+                if (region != null) {
+                    consumer.accept(region);
+                }
+            }
+        }
+    }
+
     public List<Mob> collectRelevantNavigatingMobs(RegionPos regionPos) {
         if (!level.chunkScheduler.getRegionLocker().hasLock(regionPos)) {
             // We care about the navigating mobs in at least this region, ensure it's locked
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index d5f0acade30d8f64a2db2c3aba195b89fd52643b..f32aecd69d929c005ca8226054c218c7dd37e6fc 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -82,6 +82,8 @@ public class ShreddedPaperChunkTicker {
 
             region.forEach(chunk -> _tickChunk(level, chunk, spawnercreature_d));
 
+            level.runBlockEvents(region);
+
             region.forEachTickingEntity(ShreddedPaperEntityTicker::tickEntity);
 
             region.forEachTrackedEntity(ShreddedPaperEntityTicker::processTrackQueue);
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 772c1ff243d9f677f7234b4e9765503abfdc9c99..3b6355790fc578c96845f802d1e99359fa3bbae0 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.LevelChunkRegion;
 import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
@@ -15,7 +16,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.io.BufferedWriter;
 import java.io.IOException;
@@ -125,7 +125,6 @@ import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SnowLayerBlock;
-import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
@@ -136,7 +135,6 @@ import net.minecraft.world.level.chunk.storage.RegionStorageInfo;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityTickList;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.entity.LevelEntityGetter;
@@ -209,8 +207,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
     final Set<Mob> navigatingMobs;
     final ThreadLocal<Boolean> isUpdatingNavigations = ThreadLocal.withInitial(() -> false); // ShreddedPaper - make thread local
     protected final Raids raids;
-    private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents;
-    private final List<BlockEventData> blockEventsToReschedule;
+    // private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents; // ShreddedPaper - moved into each region
+    private final ThreadLocal<List<BlockEventData>> blockEventsToRescheduleThreadLocal; // ShreddedPaper
     private boolean handlingTick;
     private final List<CustomSpawner> customSpawners;
     @Nullable
@@ -717,8 +715,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.fluidTicks = new LevelTicksRegionProxy<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier()); // ShreddedPaper
         this.pathTypesByPosCache = new PathTypeCache();
         this.navigatingMobs = new ObjectOpenHashSet();
-        this.blockEvents = new ObjectLinkedOpenHashSet();
-        this.blockEventsToReschedule = new ArrayList(64);
+        // this.blockEvents = new ObjectLinkedOpenHashSet(); // ShreddedPaper - moved into each region
+        this.blockEventsToRescheduleThreadLocal = ThreadLocal.withInitial(() -> new ArrayList(64)); // ShreddedPaper
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
         this.server = minecraftserver;
@@ -903,7 +901,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         //gameprofilerfiller.popPush("blockEvents"); // Purpur
         if (flag) {
             // this.timings.doSounds.startTiming(); // Spigot // Purpur
-            this.runBlockEvents();
+            // this.runBlockEvents(); // ShreddedPaper - handled locally in the region
             // this.timings.doSounds.stopTiming(); // Spigot // Purpur
         }
 
@@ -2044,25 +2042,26 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @Override
     public void blockEvent(BlockPos pos, Block block, int type, int data) {
-        this.blockEvents.add(new BlockEventData(pos, block, type, data));
+        this.chunkSource.tickingRegions.addBlockEvent(new BlockEventData(pos, block, type, data)); // ShreddedPaper
     }
 
-    private void runBlockEvents() {
-        this.blockEventsToReschedule.clear();
+    public void runBlockEvents(LevelChunkRegion region) { // ShreddedPaper
+        List<BlockEventData> blockEventsToReschedule = blockEventsToRescheduleThreadLocal.get(); // ShreddedPaper
+        blockEventsToReschedule.clear(); // ShreddedPaper
 
-        while (!this.blockEvents.isEmpty()) {
-            BlockEventData blockactiondata = (BlockEventData) this.blockEvents.removeFirst();
+        while (region.hasBlockEvents()) { // ShreddedPaper
+            BlockEventData blockactiondata = (BlockEventData) region.removeFirstBlockEvent(); // ShreddedPaper
 
             if (this.shouldTickBlocksAt(blockactiondata.pos())) {
                 if (this.doBlockEvent(blockactiondata)) {
                     this.server.getPlayerList().broadcast((Player) null, (double) blockactiondata.pos().getX(), (double) blockactiondata.pos().getY(), (double) blockactiondata.pos().getZ(), 64.0D, this.dimension(), new ClientboundBlockEventPacket(blockactiondata.pos(), blockactiondata.block(), blockactiondata.paramA(), blockactiondata.paramB()));
                 }
             } else {
-                this.blockEventsToReschedule.add(blockactiondata);
+                blockEventsToReschedule.add(blockactiondata); // ShreddedPaper
             }
         }
 
-        this.blockEvents.addAll(this.blockEventsToReschedule);
+        region.addAllBlockEvents(blockEventsToReschedule); // ShreddedPaper
     }
 
     private boolean doBlockEvent(BlockEventData event) {
@@ -2546,9 +2545,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @VisibleForTesting
     public void clearBlockEvents(BoundingBox box) {
-        this.blockEvents.removeIf((blockactiondata) -> {
-            return box.isInside(blockactiondata.pos());
+        // ShreddedPaper start - moved blockEvents into regions
+        this.getLevel().getChunkSource().tickingRegions.forEachRegionInBoundingBox(box, region -> {
+            region.removeBlockEventsIf((blockactiondata) -> {
+                return box.isInside(blockactiondata.pos());
+            });
         });
+        // ShreddedPaper end - moved blockEvents into regions
     }
 
     @Override
