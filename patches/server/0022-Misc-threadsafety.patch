From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 13:58:42 +0900
Subject: [PATCH] Misc threadsafety


diff --git a/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java b/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
index a5f706d6f716b2a463ae58adcde69d9e665c7733..2f269fee6e9119db5b67934627d66e96672da892 100644
--- a/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
+++ b/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
@@ -154,11 +154,11 @@ public final class SingleThreadChunkRegionManager {
         return section;
     }
 
-    public void addChunk(final int chunkX, final int chunkZ) {
+    public synchronized void addChunk(final int chunkX, final int chunkZ) { // ShreddedPaper - synchronized
         this.getOrCreateAndMergeSection(chunkX >> this.regionChunkShift, chunkZ >> this.regionChunkShift, null).addChunk(chunkX, chunkZ);
     }
 
-    public void removeChunk(final int chunkX, final int chunkZ) {
+    public synchronized void removeChunk(final int chunkX, final int chunkZ) { // ShreddedPaper - synchronized
         final RegionSection section = this.regionsBySection.get(
                 MCUtil.getCoordinateKey(chunkX >> this.regionChunkShift, chunkZ >> this.regionChunkShift)
         );
@@ -169,7 +169,7 @@ public final class SingleThreadChunkRegionManager {
         }
     }
 
-    public void recalculateRegions() {
+    public synchronized void recalculateRegions() { // ShreddedPaper - synchronized
         for (int i = 0, len = this.needsRecalculation.size(); i < len; ++i) {
             final Region region = this.needsRecalculation.removeFirst();
 
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index 758c155c23d95c3cc952cb14f864c703f9b45127..6b83f09f9862e298cad009b3e3a384478f616030 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -6,6 +6,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.RegionPos;
 import io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader;
 import io.papermc.paper.chunk.system.io.RegionFileIOThread;
 import io.papermc.paper.chunk.system.poi.PoiChunk;
@@ -50,6 +51,7 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -57,6 +59,7 @@ import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.Predicate;
+import java.util.function.Supplier;
 
 public final class ChunkHolderManager {
 
@@ -279,7 +282,23 @@ public final class ChunkHolderManager {
         for (int i = 0, len = holders.size(); i < len; ++i) {
             final NewChunkHolder holder = holders.get(i);
             try {
-                final NewChunkHolder.SaveStat saveStat = holder.save(shutdown, false);
+                // ShreddedPaper start - save on chunk's thread
+                CompletableFuture<NewChunkHolder.SaveStat> future;
+                Supplier<NewChunkHolder.SaveStat> supplier = () -> holder.save(shutdown, false);
+                do {
+                    if (TickThread.isShutdownThread()) {
+                        // We're shutting down, no need to worry about chunk threads
+                        future = CompletableFuture.completedFuture(supplier.get());
+                    } else {
+                        future = CompletableFuture.supplyAsync(supplier, r -> world.chunkScheduler.getRegionLocker().tryReadOnlyLockNow(RegionPos.forChunk(holder.vanillaChunkHolder.pos), r));
+                        if (!future.isDone()) {
+                            // Poll task while we wait for region to become unlocked
+                            world.chunkSource.mainThreadProcessor.pollTask();
+                        }
+                    }
+                } while (!future.isDone());
+                final NewChunkHolder.SaveStat saveStat = future.join();
+                // ShreddedPaper end - save on chunk's thread
                 if (saveStat != null) {
                     ++saved;
                     needsFlush = flush;
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index 645e39222d81a5049888c86881ee381310fa7060..8fe50092e5e99127c937cf50990c3ad80f9a750e 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -14,6 +14,9 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
 import io.multipaper.shreddedpaper.region.RegionPos;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class TickThread extends Thread {
@@ -37,56 +40,77 @@ public class TickThread extends Thread {
         ensureTickThread(reason);
     }
 
+    // ShreddedPaper start
+    public static void failedTickThreadCheck(final String reason, final String extraData) {
+        if (!isTickThread()) {
+            MinecraftServer.LOGGER.error(Thread.currentThread().getName() + " tried to run a task async: " + reason);
+        } else {
+            MinecraftServer.LOGGER.error(Thread.currentThread().getName() + " tried to run a task from the wrong thread: " + reason);
+        }
+        MinecraftServer.LOGGER.error("Extra data: " + extraData);
+        MinecraftServer.LOGGER.error("Server Version: " + Bukkit.getVersion());
+        MinecraftServer.LOGGER.error("Region locks currently held (regionSize=" + RegionPos.REGION_SIZE + " chunks): " + getCurrentLocksHeld());
+        MinecraftServer.LOGGER.error("Stack trace:", new Throwable());
+        throw new IllegalStateException(reason);
+    }
+
+    private static List<String> getCurrentLocksHeld() {
+        List<String> strings = new ArrayList<>();
+
+        for (ServerLevel level : MinecraftServer.getServer().getAllLevels()) {
+            Set<RegionPos> regions = level.chunkScheduler.getRegionLocker().getLockedRegions();
+            if (!regions.isEmpty()) {
+                strings.add(level.convertable.getLevelId() + "=" + regions.stream().map(region -> "[" + region.x + "," + region.z + "]").toList());
+            }
+        }
+
+        return strings;
+    }
+    // ShreddedPaper end
+
     /**
      * @deprecated
      */
     @Deprecated
     public static void ensureTickThread(final String reason) {
         if (!isTickThread()) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, null);
         }
     }
 
     public static void ensureTickThread(final ServerLevel world, final BlockPos pos, final String reason) {
         if (!isTickThreadFor(world, pos)) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, "world=" + world.convertable.getLevelId() + ", pos=" + pos);
         }
     }
 
     public static void ensureTickThread(final ServerLevel world, final ChunkPos pos, final String reason) {
         if (!isTickThreadFor(world, pos)) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, "world=" + world.convertable.getLevelId() + ", chunkpos=" + pos);
         }
     }
 
     public static void ensureTickThread(final ServerLevel world, final int chunkX, final int chunkZ, final String reason) {
         if (!isTickThreadFor(world, chunkX, chunkZ)) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, "world=" + world.convertable.getLevelId() + ", chunkpos=[" + chunkX + "," + chunkZ + "]");
         }
     }
 
     public static void ensureTickThread(final Entity entity, final String reason) {
         if (!isTickThreadFor(entity)) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, "entity=" + entity);
         }
     }
 
     public static void ensureTickThread(final ServerLevel world, final AABB aabb, final String reason) {
         if (!isTickThreadFor(world, aabb)) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, "world=" + world.convertable.getLevelId() + ", aabb=" + aabb);
         }
     }
 
     public static void ensureTickThread(final ServerLevel world, final double blockX, final double blockZ, final String reason) {
         if (!isTickThreadFor(world, blockX, blockZ)) {
-            MinecraftServer.LOGGER.error("Thread " + Thread.currentThread().getName() + " failed main thread check: " + reason, new Throwable());
-            throw new IllegalStateException(reason);
+            failedTickThreadCheck(reason, "world=" + world.convertable.getLevelId() + ", x=" + (int) blockX + " y=? z=" + (int) blockZ);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 472b9494f8a34a8ba90d6a2936b0db7530a229ad..0e0c3a010d5cfaa0c15bcb38c4e3b1a8d7ad39a1 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -1,6 +1,8 @@
 package net.minecraft.server.level;
 
 import com.mojang.datafixers.util.Pair;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.util.ArrayList;
@@ -212,6 +214,9 @@ public class ChunkHolder {
     // Paper - rewrite chunk system
 
     public void blockChanged(BlockPos pos) {
+        if (!chunkMap.level.getServer().forceTicks && !TickThread.isShutdownThread() && !this.chunkMap.level.chunkScheduler.getRegionLocker().hasWriteLock(RegionPos.forBlockPos(pos))) { // ShreddedPaper
+            TickThread.failedTickThreadCheck("Block change is not write locked", "world=" + this.chunkMap.level.convertable.getLevelId() + ", pos=" + pos + ", newstate=" + this.getFullChunkNow().getBlockState(pos)); // ShreddedPaper
+        } // ShreddedPaper
         // Paper start - replace player chunk loader
         if (this.playersSentChunkTo.size() == 0) {
             return;
diff --git a/src/main/java/net/minecraft/server/level/PlayerMap.java b/src/main/java/net/minecraft/server/level/PlayerMap.java
index 12f1345ff70388fb217100bfc717ef861785381d..9c0f561a65ed5f5b45ce4c30754f71b310e614b0 100644
--- a/src/main/java/net/minecraft/server/level/PlayerMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerMap.java
@@ -2,36 +2,47 @@ package net.minecraft.server.level;
 
 import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
 import it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap;
+import io.multipaper.shreddedpaper.util.SimpleStampedLock;
+
+import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public final class PlayerMap {
     private final Object2BooleanMap<ServerPlayer> players = new Object2BooleanOpenHashMap<>();
-
-    public Set<ServerPlayer> getAllPlayers() {
-        return this.players.keySet();
+    private final SimpleStampedLock playersLock = new SimpleStampedLock(); // ShreddedPaper
+    private final CopyOnWriteArrayList<ServerPlayer> playersList = new CopyOnWriteArrayList<>(); // ShreddedPaper
+
+    public List<ServerPlayer> getAllPlayers() { // ShreddedPaper
+        // ShreddedPaper - change to a CopyOnWriteArrayList cache of the player key set to allow for thread-safe iteration
+        //  - Players aren't added/removed often, so a CopyOnWriteArrayList is sufficient
+        // return this.players.keySet(); // ShreddedPaper
+        return this.playersList; // ShreddedPaper
     }
 
     public void addPlayer(ServerPlayer player, boolean inactive) {
-        this.players.put(player, inactive);
+        this.playersLock.write(() -> this.players.put(player, inactive)); // ShreddedPaper
+        this.playersList.add(player); // ShreddedPaper
     }
 
     public void removePlayer(ServerPlayer player) {
-        this.players.removeBoolean(player);
+        this.playersLock.write(() -> this.players.removeBoolean(player)); // ShreddedPaper
+        this.playersList.remove(player); // ShreddedPaper
     }
 
     public void ignorePlayer(ServerPlayer player) {
-        this.players.replace(player, true);
+        this.playersLock.write(() -> this.players.replace(player, true)); // ShreddedPaper
     }
 
     public void unIgnorePlayer(ServerPlayer player) {
-        this.players.replace(player, false);
+        this.playersLock.write(() -> this.players.replace(player, false)); // ShreddedPaper
     }
 
     public boolean ignoredOrUnknown(ServerPlayer player) {
-        return this.players.getOrDefault(player, true);
+        return this.playersLock.optimisticRead(() -> this.players.getOrDefault(player, true)); // ShreddedPaper
     }
 
     public boolean ignored(ServerPlayer player) {
-        return this.players.getBoolean(player);
+        return this.playersLock.optimisticRead(() -> this.players.getBoolean(player)); // ShreddedPaper
     }
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 6542c67e753245cd131de872c28862f83e7ff2f3..f355833ee748e25af228ad9bd3dc06606308e490 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -13,6 +13,8 @@ import java.util.Set;
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import io.multipaper.shreddedpaper.ShreddedPaper;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index e1560a58cc2e9570b9533e26156f322b8cdcc332..c992f7510efd80b000c9ce364e964ca59e220b9d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1020,7 +1020,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private void wakeUpAllPlayers() {
         this.sleepStatus.removeAllSleepers();
         (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> { // CraftBukkit - decompile error
-            entityplayer.stopSleepInBed(false, false);
+            entityplayer.getBukkitEntity().taskScheduler.schedule(e -> entityplayer.stopSleepInBed(false, false), e -> {}, 1); // ShreddedPaper - run sync
         });
     }
     // Paper start - optimise random block ticking
@@ -2204,18 +2204,21 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Paper start - Call missing map initialize event and set id
         final DimensionDataStorage storage = this.getServer().overworld().getDataStorage();
 
-        final net.minecraft.world.level.saveddata.SavedData existing = storage.cache.get(id.key());
-        if (existing == null && !storage.cache.containsKey(id.key())) {
+        // ShreddedPaper start - thread-safe
+        final net.minecraft.world.level.saveddata.SavedData existing = storage.cache.computeIfAbsent(id.key(), key -> {
             final MapItemSavedData worldmap = (MapItemSavedData) this.getServer().overworld().getDataStorage().get(MapItemSavedData.factory(), id.key());
-            storage.cache.put(id.key(), worldmap);
             if (worldmap != null) {
                 worldmap.id = id;
                 new MapInitializeEvent(worldmap.mapView).callEvent();
                 return worldmap;
             }
-        } else if (existing instanceof MapItemSavedData mapItemSavedData) {
+            return worldmap;
+        });
+
+        if (existing instanceof MapItemSavedData mapItemSavedData) {
             mapItemSavedData.id = id;
         }
+        // ShreddedPaper end - thread-safe
 
         return existing instanceof MapItemSavedData data ? data : null;
         // Paper end - Call missing map initialize event and set id
@@ -2841,6 +2844,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     {
                         if ( o instanceof MapItemSavedData )
                         {
+                            synchronized (o) { // ShreddedPaper - thread-safe
                             MapItemSavedData map = (MapItemSavedData) o;
                             map.carriedByPlayers.remove( (Player) entity );
                             for ( Iterator<MapItemSavedData.HoldingPlayer> iter = (Iterator<MapItemSavedData.HoldingPlayer>) map.carriedBy.iterator(); iter.hasNext(); )
@@ -2851,6 +2855,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                                     iter.remove();
                                 }
                             }
+                            } // ShreddedPaper - thread-safe
                         }
                     }
                 } );
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 01904ed991aecab3a399d62c562195b84c713750..66d859000e610934560d022750c93026ebf057a1 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2852,6 +2852,8 @@ public class ServerPlayer extends Player {
 
                 this.connection.send(new ClientboundRemoveMobEffectPacket(entity.getId(), mobeffect.getEffect()));
             }
+
+            if (entity.tracker != null) entity.tracker.serverEntity.sendChanges(); // ShreddedPaper - send changes now
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index d7519408d7280818d1e7f6e26e51affdeb5de65e..7cf508d29bfa2c871f2c1908585db2fe2be7eee8 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -7,6 +7,7 @@ import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.ShreddedPaper;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -3530,7 +3531,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
         this.filterTextPacket(list).thenAcceptAsync((list1) -> {
             this.updateSignText(packet, list1);
-        }, this.server);
+        }, r -> ShreddedPaper.runSync(this.player, r)); // ShreddedPaper - run on region thread
     }
 
     private void updateSignText(ServerboundSignUpdatePacket packet, List<FilteredText> signText) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index c6f193339fdcbcc938d4eafdcad0b112cf1698d5..256fbdc2a287a8232c8ecb9d0e06290a141a49ee 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -49,7 +49,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return POI_DATA_SOURCE - level;
     }
 
-    protected void updateDistanceTracking(long section) {
+    protected synchronized void updateDistanceTracking(long section) {
         if (this.isVillageCenter(section)) {
             this.villageDistanceTracker.setSource(section, POI_DATA_SOURCE);
         } else {
@@ -228,7 +228,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         return this.getOrLoad(SectionPos.asLong(pos)).map(poiSet -> poiSet.getFreeTickets(pos)).orElse(0);
     }
 
-    public int sectionsToVillage(SectionPos pos) {
+    public synchronized int sectionsToVillage(SectionPos pos) {
         this.villageDistanceTracker.propagateUpdates(); // Paper - replace distance tracking util
         return convertBetweenLevels(this.villageDistanceTracker.getLevel(io.papermc.paper.util.CoordinateUtils.getChunkSectionKey(pos))); // Paper - replace distance tracking util
     }
@@ -243,7 +243,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     }
 
     @Override
-    public void tick(BooleanSupplier shouldKeepTicking) {
+    public synchronized void tick(BooleanSupplier shouldKeepTicking) {
         this.villageDistanceTracker.propagateUpdates(); // Paper - rewrite chunk system
     }
 
diff --git a/src/main/java/net/minecraft/world/item/MapItem.java b/src/main/java/net/minecraft/world/item/MapItem.java
index 608390ed36710a419de1542b80340dd3fcc7299c..13b7973ad6d53cefea5aa037cd1a9ff2ad839df4 100644
--- a/src/main/java/net/minecraft/world/item/MapItem.java
+++ b/src/main/java/net/minecraft/world/item/MapItem.java
@@ -69,6 +69,7 @@ public class MapItem extends ComplexItem {
     }
 
     public void update(Level world, Entity entity, MapItemSavedData state) {
+        synchronized (state) { // ShreddedPaper - thread-safe
         if (world.dimension() == state.dimension && entity instanceof Player) {
             int i = 1 << state.scale;
             int j = state.centerX;
@@ -181,6 +182,7 @@ public class MapItem extends ComplexItem {
                 }
             }
         }
+        } // ShreddedPaper - thread-safe
     }
 
     private BlockState getCorrectStateForFluidBlock(Level world, BlockState state, BlockPos pos) {
@@ -195,6 +197,7 @@ public class MapItem extends ComplexItem {
     public static void renderBiomePreviewMap(ServerLevel world, ItemStack map) {
         MapItemSavedData mapItemSavedData = getSavedData(map, world);
         if (mapItemSavedData != null) {
+            synchronized (mapItemSavedData) { // ShreddedPaper - thread-safe
             mapItemSavedData.isExplorerMap = true; // Purpur
             if (world.dimension() == mapItemSavedData.dimension) {
                 int i = 1 << mapItemSavedData.scale;
@@ -265,6 +268,7 @@ public class MapItem extends ComplexItem {
                     }
                 }
             }
+            } // ShreddedPaper - thread-safe
         }
     }
 
@@ -273,6 +277,7 @@ public class MapItem extends ComplexItem {
         if (!world.isClientSide) {
             MapItemSavedData mapItemSavedData = getSavedData(stack, world);
             if (mapItemSavedData != null) {
+                synchronized (mapItemSavedData) { // ShreddedPaper - thread-safe
                 if (entity instanceof Player player) {
                     mapItemSavedData.tickCarriedBy(player, stack);
                 }
@@ -280,6 +285,7 @@ public class MapItem extends ComplexItem {
                 if (!mapItemSavedData.locked && (selected || entity instanceof Player && ((Player)entity).getOffhandItem() == stack)) {
                     this.update(world, entity, mapItemSavedData);
                 }
+                } // ShreddedPaper - thread-safe
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index cd0e43f4c53a746dd6183a8406269f9b11ad3571..5f810f8c11a10bd371127a08b4fd9df874373f90 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -6,6 +6,8 @@ import java.util.HashSet;
 import java.util.Objects;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.HolderLookup;
@@ -21,6 +23,7 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
@@ -233,6 +236,7 @@ public abstract class BlockEntity {
     public void setChanged() {
         if (this.level != null) {
             if (ignoreTileUpdates) return; // Paper - Perf: Optimize Hoppers
+            TickThread.ensureTickThread((ServerLevel) this.level, this.worldPosition, "Block entity modification"); // ShreddedPaper
             BlockEntity.setChanged(this.level, this.worldPosition, this.blockState);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
index 81dd0aa6a90fd9dda9e7752f85b9cf4568e3b575..49d288e22911acd20c8935bfbed415a6f7374c4e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -45,9 +45,9 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
     // Paper end - Fix NPE in SculkBloomEvent world access
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, SculkCatalystBlockEntity blockEntity) {
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = blockEntity.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride.set(blockEntity.getBlockPos()); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // ShreddedPaper - use thread local
         blockEntity.catalystListener.getSculkSpreader().updateCursors(world, pos, world.getRandom(), true);
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride.remove(); // CraftBukkit // ShreddedPaper - use thread local
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 031fc626d2075cbe0941fecc188406712ab9953f..b9b084b7e9d5c9b4613d45eed9612ad5f7a4af77 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -3,6 +3,7 @@ package net.minecraft.world.level.block.state;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import java.util.Arrays;
 import java.util.Collections;
@@ -162,11 +163,11 @@ public abstract class BlockBehaviour implements FeatureElement {
     // Paper end - UseOnContext param
 
     protected void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        org.spigotmc.AsyncCatcher.catchOp("block onPlace"); // Spigot
+        TickThread.ensureTickThread((ServerLevel) world, pos, "block onPlace"); // Spigot // ShreddedPaper
     }
 
     protected void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
-        org.spigotmc.AsyncCatcher.catchOp("block remove"); // Spigot
+        TickThread.ensureTickThread((ServerLevel) world, pos, "block remove"); // Spigot // ShreddedPaper
         if (state.hasBlockEntity() && !state.is(newState.getBlock())) {
             world.removeBlockEntity(pos);
         }
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
index 763b315b1d761bc3bd82d9b847ed3f64fd5ce991..841aa55043f354d5058992d43645bf9e56a723db 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
@@ -33,7 +33,7 @@ public class MapIndex extends SavedData {
     }
 
     @Override
-    public CompoundTag save(CompoundTag nbt, HolderLookup.Provider registryLookup) {
+    public synchronized CompoundTag save(CompoundTag nbt, HolderLookup.Provider registryLookup) { // ShreddedPaper - thread-safe
         for (Entry<String> entry : this.usedAuxIds.object2IntEntrySet()) {
             nbt.putInt(entry.getKey(), entry.getIntValue());
         }
@@ -41,7 +41,7 @@ public class MapIndex extends SavedData {
         return nbt;
     }
 
-    public MapId getFreeAuxValueForMap() {
+    public synchronized MapId getFreeAuxValueForMap() { // ShreddedPaper - thread-safe
         int i = this.usedAuxIds.getInt("map") + 1;
         this.usedAuxIds.put("map", i);
         this.setDirty();
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index 6e23e69abd56eeda3b52a22019e1b74ae10682e7..3fdbec5ab625e5d1e9c7cbad2377a8e673a64765 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -25,7 +25,7 @@ import org.slf4j.Logger;
 
 public class DimensionDataStorage implements java.io.Closeable { // Paper - Write SavedData IO async
     private static final Logger LOGGER = LogUtils.getLogger();
-    public final Map<String, SavedData> cache = Maps.newHashMap();
+    public final Map<String, SavedData> cache = Maps.newConcurrentMap(); // ShreddedPaper - thread-safe
     private final DataFixer fixerUpper;
     private final HolderLookup.Provider registries;
     private final File dataFolder;
@@ -43,25 +43,23 @@ public class DimensionDataStorage implements java.io.Closeable { // Paper - Writ
     }
 
     public <T extends SavedData> T computeIfAbsent(SavedData.Factory<T> type, String id) {
-        T savedData = this.get(type, id);
-        if (savedData != null) {
+        // ShreddedPaper start - thread-safe
+        return (T) this.cache.compute(id, (key, savedData) -> {
+            if (savedData == null) {
+                return type.constructor().get();
+            }
             return savedData;
-        } else {
-            T savedData2 = (T)type.constructor().get();
-            this.set(id, savedData2);
-            return savedData2;
-        }
+        });
+        // ShreddedPaper end - thread-safe
     }
 
     @Nullable
     public <T extends SavedData> T get(SavedData.Factory<T> type, String id) {
-        SavedData savedData = this.cache.get(id);
-        if (savedData == null && !this.cache.containsKey(id)) {
-            savedData = this.readSavedData(type.deserializer(), type.type(), id);
-            this.cache.put(id, savedData);
-        }
-
-        return (T)savedData;
+        // ShreddedPaper start - thread-safe
+        return (T) this.cache.computeIfAbsent(id, (key) -> {
+            return this.readSavedData(type.deserializer(), type.type(), key);
+        });
+        // ShreddedPaper end - thread-safe
     }
 
     @Nullable
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 3ed19f30f1cab9df3b1bfdf0b0caf7882a77c5f7..bebe02d73ed34453ff521ec1d803935c0287604b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,6 +9,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -523,7 +525,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
-        org.spigotmc.AsyncCatcher.catchOp("effect add"); // Paper
+        TickThread.ensureTickThread(this.getHandle(), "effect add"); // Paper // ShreddedPaper
         this.getHandle().addEffect(org.bukkit.craftbukkit.potion.CraftPotionUtil.fromBukkit(effect), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index c12484e13ff2b06b9bad7c5b2bbf9e82c1cbc989..8597de8b2a6a78fb6bc596063663fd75ebb2acdb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3501,7 +3501,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start - Add chunk view API
     @Override
     public Set<java.lang.Long> getSentChunkKeys() {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // ShreddedPaper
         return it.unimi.dsi.fastutil.longs.LongSets.unmodifiable(
             this.getHandle().chunkLoader.getSentChunksRaw().clone()
         );
@@ -3509,7 +3509,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public Set<org.bukkit.Chunk> getSentChunks() {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // ShreddedPaper
         final it.unimi.dsi.fastutil.longs.LongOpenHashSet rawChunkKeys = this.getHandle().chunkLoader.getSentChunksRaw();
         final it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<org.bukkit.Chunk> chunks = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(rawChunkKeys.size());
         final org.bukkit.World world = this.getWorld();
@@ -3522,7 +3522,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean isChunkSent(final long chunkKey) {
-        org.spigotmc.AsyncCatcher.catchOp("accessing sent chunks");
+        TickThread.ensureTickThread(this.getHandle(), "accessing sent chunks"); // ShreddedPaper
         return this.getHandle().chunkLoader.getSentChunksRaw().contains(chunkKey);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 5308dc55bcc334ad6bef927de6c2d9b9364d99ff..7e91d1ea6e144826e3d88e61a25fd533f2c9407d 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -951,7 +951,7 @@ public class CraftEventFactory {
         return CraftEventFactory.handleBlockSpreadEvent(world, source, target, block, 2);
     }
 
-    public static BlockPos sourceBlockOverride = null; // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+    public static ThreadLocal<BlockPos> sourceBlockOverride = ThreadLocal.withInitial(() -> null); // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // ShreddedPaper - use thread local
 
     public static boolean handleBlockSpreadEvent(LevelAccessor world, BlockPos source, BlockPos target, net.minecraft.world.level.block.state.BlockState block, int flag) {
         // Suppress during worldgen
@@ -963,7 +963,7 @@ public class CraftEventFactory {
         CraftBlockState state = CraftBlockStates.getBlockState(world, target, flag);
         state.setData(block);
 
-        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride != null ? CraftEventFactory.sourceBlockOverride : source), state);
+        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride.get() != null ? CraftEventFactory.sourceBlockOverride.get() : source), state); // ShreddedPaper - use thread local
         Bukkit.getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
index eafa54c870c3e2aef30c3f9f96f516607a7cae24..1ba11d3653790464bc9af174daecf351fac07d4e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import io.papermc.paper.util.TickThread;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
 import net.minecraft.server.level.ServerPlayer;
@@ -70,6 +71,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItem(int index, ItemStack item) {
+        TickThread.ensureTickThread(getInventory().player, "Player inventory modification"); // ShreddedPaper
         super.setItem(index, item);
         if (this.getHolder() == null) return;
         ServerPlayer player = ((CraftPlayer) this.getHolder()).getHandle();
diff --git a/src/main/java/org/purpurmc/purpur/task/BossBarTask.java b/src/main/java/org/purpurmc/purpur/task/BossBarTask.java
index 114f273dd7f8b8a3c02f0651f6944859b33a65d4..bc501ce058f001a4c87bf2d513a855f1f35ff138 100644
--- a/src/main/java/org/purpurmc/purpur/task/BossBarTask.java
+++ b/src/main/java/org/purpurmc/purpur/task/BossBarTask.java
@@ -12,9 +12,10 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 
 public abstract class BossBarTask extends BukkitRunnable {
-    private final Map<UUID, BossBar> bossbars = new HashMap<>();
+    private final Map<UUID, BossBar> bossbars = new ConcurrentHashMap<>(); // ShreddedPaper
     private boolean started;
 
     abstract BossBar createBossBar();
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 6505f4bc7000de7b53f4f8fae2393d2c0a315c72..3862ddfdb2581c3517d2ee174d56afa5ee1d6d97 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -3,8 +3,12 @@ package org.spigotmc;
 import java.lang.management.ManagementFactory;
 import java.lang.management.MonitorInfo;
 import java.lang.management.ThreadInfo;
+import java.util.Arrays;
+import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import io.multipaper.shreddedpaper.threading.ShreddedPaperTickThread;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 
@@ -193,6 +197,11 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.dumpAllChunkLoadInfo(isLongTimeout); // Paper - rewrite chunk system
                 this.dumpTickingInfo(); // Paper - log detailed tick information
                 WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
+                // ShreddedPaper start - Dump stuck worker threads
+                for (ThreadInfo worker : getStuckTickWorkerThreads()) {
+                    WatchdogThread.dumpThread( worker, log );
+                }
+                // ShreddedPaper end - Dump stuck worker threads
                 log.log( Level.SEVERE, "------------------------------" );
                 //
                 // Paper start - Only print full dump on long timeouts
@@ -245,6 +254,14 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
         }
     }
 
+    private List<ThreadInfo> getStuckTickWorkerThreads() {
+        ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads( true, true );
+        return Arrays.stream(threads)
+                .filter(thread -> thread.getThreadName().startsWith("ShreddedPaperTickThread"))
+                .filter(thread -> Arrays.stream(thread.getStackTrace()).anyMatch(stack -> !stack.getClassName().startsWith("java") && !stack.getClassName().startsWith("jdk")))
+                .toList();
+    }
+
     private static void dumpThread(ThreadInfo thread, Logger log)
     {
         log.log( Level.SEVERE, "------------------------------" );
