From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 12 May 2024 23:54:34 +0900
Subject: [PATCH] Player


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index e7ad3b17b47e7a2e7bc38d8f414d3920e6aa5b28..d1d8b5010228b8c8d6759967515e62d850a3dc25 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -2,7 +2,10 @@ package io.multipaper.shreddedpaper.region;
 
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQueue;
 import io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.chunk.LevelChunk;
 
@@ -19,6 +22,7 @@ public class LevelChunkRegion {
     private final IteratorSafeOrderedReferenceSet<Entity> tickingEntities = new IteratorSafeOrderedReferenceSet<>(); // Use IteratorSafeOrderedReferenceSet to maintain entity tick order
     private final ConcurrentLinkedQueue<DelayedTask> scheduledTasks = new ConcurrentLinkedQueue<>(); // Writable tasks
     private final PrioritisedThreadedTaskQueue internalTasks = new PrioritisedThreadedTaskQueue(); // Read-only tasks
+    private final ObjectOpenHashSet<ServerPlayer> players = new ObjectOpenHashSet<>();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
@@ -70,6 +74,22 @@ public class LevelChunkRegion {
         return internalTasks;
     }
 
+    public synchronized void addPlayer(ServerPlayer player) {
+        if (!this.players.add(player)) {
+            throw new IllegalStateException("Tried to add a player that was already in the region: " + player.getUUID());
+        }
+    }
+
+    public synchronized void removePlayer(ServerPlayer player) {
+        if (!this.players.remove(player)) {
+            throw new IllegalStateException("Tried to remove a player that wasn't in the region: " + player.getUUID());
+        }
+    }
+
+    public synchronized List<ServerPlayer> getPlayers() {
+        return this.players.isEmpty() ? List.of() : new ObjectArrayList<>(this.players);
+    }
+
     public RegionPos getRegionPos() {
         return regionPos;
     }
@@ -108,6 +128,6 @@ public class LevelChunkRegion {
                 && tickingEntities.size() == 0
                 && scheduledTasks.isEmpty()
                 && internalTasks.getTotalTasksExecuted() >= internalTasks.getTotalTasksScheduled()
-                ;
+                && players.isEmpty();
     }
 }
diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
index af1f3ba71e44b4b49c106d1e45331641e030ec6c..bff6f98036e74a9716649b71a60c9f9d7d5278d3 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
@@ -2,6 +2,7 @@ package io.multipaper.shreddedpaper.region;
 
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
@@ -127,4 +128,23 @@ public class LevelChunkRegionMap {
         return runnable -> execute(regionPos, runnable);
     }
 
-}
\ No newline at end of file
+    public void addPlayer(ServerPlayer player) {
+        player.previousChunkPosRegion = player.chunkPosition();
+        getOrCreate(RegionPos.forChunk(player.chunkPosition())).addPlayer(player);
+    }
+
+    public void removePlayer(ServerPlayer player) {
+        getOrCreate(RegionPos.forChunk(player.chunkPosition())).removePlayer(player);
+    }
+
+    public void movePlayer(ServerPlayer player) {
+        RegionPos fromRegion = RegionPos.forChunk(player.previousChunkPosRegion);
+        RegionPos toRegion = RegionPos.forChunk(player.chunkPosition());
+
+        if (!fromRegion.equals(toRegion)) {
+            player.previousChunkPosRegion = player.chunkPosition();
+            getOrCreate(fromRegion).removePlayer(player);
+            getOrCreate(toRegion).addPlayer(player);
+        }
+    }
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index d556478dddee218971a3b1015872e86ebaaf6048..50044760d4511ff2b75d8866faec22bf33bd2f94 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -76,6 +76,8 @@ public class ShreddedPaperChunkTicker {
 
             region.forEachTickingEntity(ShreddedPaperEntityTicker::tickEntity);
 
+            region.getPlayers().forEach(ShreddedPaperPlayerTicker::tickPlayer);
+
             while (region.getInternalTaskQueue().executeTask()) ;
 
             if (region.isEmpty()) {
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperPlayerTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperPlayerTicker.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c514aa0e9bb89aa58359752dc15c8b452202d52
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperPlayerTicker.java
@@ -0,0 +1,19 @@
+package io.multipaper.shreddedpaper.threading;
+
+import io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+
+public class ShreddedPaperPlayerTicker {
+
+    public static void tickPlayer(ServerPlayer serverPlayer) {
+        serverPlayer.connection.connection.tick();
+        final RegionizedPlayerChunkLoader.PlayerChunkLoaderData loader = serverPlayer.chunkLoader;
+        if (loader != null) {
+            loader.update(); // can't invoke plugin logic
+            loader.updateQueues(System.nanoTime());
+        }
+    }
+
+}
diff --git a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
index 149cfb0587299f72fcfddf395fb71b70438986c1..cab027d5bde4fe7f4123f35a0a7a8a871da4dd1b 100644
--- a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
@@ -3,6 +3,9 @@ package io.papermc.paper.chunk.system;
 import ca.spottedleaf.concurrentutil.collection.SRSWLinkedQueue;
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
+import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperChunkTicker;
 import io.papermc.paper.chunk.system.scheduling.ChunkHolderManager;
 import io.papermc.paper.configuration.GlobalConfiguration;
 import io.papermc.paper.util.CoordinateUtils;
@@ -32,6 +35,7 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.levelgen.BelowZeroRetrogen;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
+
 import java.lang.invoke.VarHandle;
 import java.util.ArrayDeque;
 import java.util.Arrays;
@@ -312,6 +316,7 @@ public class RegionizedPlayerChunkLoader {
 
     public void tick() {
         TickThread.ensureTickThread("Cannot tick player chunk loader async");
+        if (true) return; // ShreddedPaper - why is this not just run under the player ticking system?
         long currTime = System.nanoTime();
         for (final ServerPlayer player : new java.util.ArrayList<>(this.world.players())) {
             final PlayerChunkLoaderData loader = player.chunkLoader;
@@ -393,6 +398,7 @@ public class RegionizedPlayerChunkLoader {
                 Math.abs(c2x - centerX) + Math.abs(c2z - centerZ)
             );
         };
+        private final LongArrayList retryLaterSendQueue = new LongArrayList(); // ShreddedPaper
         private final LongHeapPriorityQueue sendQueue = new LongHeapPriorityQueue(CLOSEST_MANHATTAN_DIST);
         private final LongHeapPriorityQueue tickingQueue = new LongHeapPriorityQueue(CLOSEST_MANHATTAN_DIST);
         private final LongHeapPriorityQueue generatingQueue = new LongHeapPriorityQueue(CLOSEST_MANHATTAN_DIST);
@@ -609,7 +615,7 @@ public class RegionizedPlayerChunkLoader {
             return Math.max(Math.abs(dx), Math.abs(dz)) <= this.lastTickDistance;
         }
 
-        void updateQueues(final long time) {
+        public void updateQueues(final long time) { // ShreddedPaper - make public
             TickThread.ensureTickThread(this.player, "Cannot tick player chunk loader async");
             if (this.removed) {
                 throw new IllegalStateException("Ticking removed player chunk loader");
@@ -796,17 +802,31 @@ public class RegionizedPlayerChunkLoader {
             final long maxSends = Math.max(0L, Math.min(MAX_RATE, Integer.MAX_VALUE)); // no logic to track concurrent sends
             final int maxSendsThisTick = Math.min((int)this.chunkSendLimiter.takeAllocation(time, sendRate, maxSends), this.sendQueue.size());
             // we do not return sends that we took from the allocation back because we want to limit the max send rate, not target it
+            int j = 0; // ShreddedPaper
             for (int i = 0; i < maxSendsThisTick; ++i) {
                 final long pendingSend = this.sendQueue.firstLong();
                 final int pendingSendX = CoordinateUtils.getChunkX(pendingSend);
                 final int pendingSendZ = CoordinateUtils.getChunkZ(pendingSend);
                 final LevelChunk chunk = this.world.chunkSource.getChunkAtIfLoadedMainThreadNoCache(pendingSendX, pendingSendZ);
-                if (!chunk.areNeighboursLoaded(1) || !TickThread.isTickThreadFor(this.world, pendingSendX, pendingSendZ)) {
+                if (chunk == null || !chunk.areNeighboursLoaded(1)) { // ShreddedPaper - do thread check later / chunk could have been unloaded before sending
                     // nothing to do
                     // the target chunk may not be owned by this region, but this should be resolved in the future
                     break;
                 }
                 if (!chunk.isPostProcessingDone) {
+                    // ShreddedPaper start - run post-processing on the tick thread
+                    if (!ShreddedPaperChunkTicker.isCurrentlyTickingRegion(this.world, RegionPos.forChunk(chunk.getPos()))) {
+                        this.retryLaterSendQueue.add(this.sendQueue.dequeueLong());
+                        ShreddedPaper.runSync(this.world, chunk.getPos(), () -> {
+                            final LevelChunk chunk2 = this.world.chunkSource.getChunkAtIfLoadedMainThreadNoCache(pendingSendX, pendingSendZ);
+                            if (chunk2 != null && chunk2.areNeighboursLoaded(1) && !chunk2.isPostProcessingDone) {
+                                chunk2.postProcessGeneration();
+                            }
+                        });
+                        if (maxSendsThisTick - i - 1 > this.sendQueue.size() && j++ < maxSendsThisTick * 2) i--; // Let us try sending more chunks, up to a threshold
+                        continue;
+                    }
+                    // ShreddedPaper end - run post-processing on the tick thread
                     // not yet post-processed, need to do this so that tile entities can properly be sent to clients
                     chunk.postProcessGeneration();
                     // check if there was any recursive action
@@ -816,13 +836,32 @@ public class RegionizedPlayerChunkLoader {
                 }
                 this.sendQueue.dequeueLong();
 
-                this.sendChunk(pendingSendX, pendingSendZ);
+                // ShreddedPaper start - send on both player and tick thread
+                if (TickThread.isTickThreadFor(this.world, chunk.getPos())) {
+                    this.sendChunk(pendingSendX, pendingSendZ);
+                } else if (!this.world.chunkScheduler.getRegionLocker().tryReadOnlyLockNow(RegionPos.forChunk(chunk.getPos()), () -> {
+                    this.sendChunk(pendingSendX, pendingSendZ);
+                })) {
+                    this.retryLaterSendQueue.add(pendingSend);
+                    if (maxSendsThisTick - i - 1 > this.sendQueue.size() && j++ < maxSendsThisTick * 2) i--; // Let us try sending more chunks, up to a threshold
+                    continue;
+                }
+                // ShreddedPaper end - send on both player and tick thread
                 if (this.removed) {
                     // sendChunk may invoke plugin logic
                     return;
                 }
             }
 
+            // ShreddedPaper start - requeue retry send chunks
+            if (!this.retryLaterSendQueue.isEmpty()) {
+                for (final long chunk : this.retryLaterSendQueue) {
+                    this.sendQueue.enqueue(chunk);
+                }
+                this.retryLaterSendQueue.clear();
+            }
+            // ShreddedPaper end - requeue retry send chunks
+
             this.flushDelayedTicketOps();
             // we assume propagate ticket levels happens after this call
         }
@@ -873,7 +912,7 @@ public class RegionizedPlayerChunkLoader {
             );
         }
 
-        void update() {
+        public void update() { // ShreddedPaper - make public
             TickThread.ensureTickThread(this.player, "Cannot update player asynchronously");
             if (this.removed) {
                 throw new IllegalStateException("Updating removed player chunk loader");
@@ -930,6 +969,7 @@ public class RegionizedPlayerChunkLoader {
                 this.player.connection.send(this.updateClientSimulationDistance(tickViewDistance));
             }
 
+            this.retryLaterSendQueue.clear(); // ShreddedPaper
             this.sendQueue.clear();
             this.tickingQueue.clear();
             this.generatingQueue.clear();
@@ -1036,6 +1076,7 @@ public class RegionizedPlayerChunkLoader {
             this.tickMap.remove();
 
             // purge queues
+            this.retryLaterSendQueue.clear(); // ShreddedPaper
             this.sendQueue.clear();
             this.tickingQueue.clear();
             this.generatingQueue.clear();
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 3b66ecc4f110d0f2dc0ef6c560801296d7e0be64..61327dfa158b385bfba4768493fd7724c4da73c5 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -42,6 +42,8 @@ import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.network.chat.Component;
@@ -60,6 +62,7 @@ import net.minecraft.network.protocol.login.LoginProtocols;
 import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.StatusProtocols;
 import net.minecraft.server.RunningOnDifferentThreadException;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.util.Mth;
 import net.minecraft.util.debugchart.LocalSampleLogger;
 import org.apache.commons.lang3.Validate;
@@ -611,6 +614,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private static int currTick; // Paper - Buffer joins to world
     private static int tickSecond; // Purpur
     public void tick() {
+        if (this.packetListener instanceof ServerGamePacketListenerImpl serverGamePacketListener && !TickThread.isTickThreadFor(serverGamePacketListener.player)) return; // ShreddedPaper
         this.flushQueue();
         // Paper start - Buffer joins to world
         if (Connection.currTick != net.minecraft.server.MinecraftServer.currentTick) {
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index 8c134a642ccaf3530022f2e675a858d726e1dda4..f5154194df9e44f8bcf431029f4bbed68db49658 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -1,10 +1,12 @@
 package net.minecraft.network.protocol;
 
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.TickThread;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.network.PacketListener;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -14,6 +16,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.network.ServerCommonPacketListenerImpl;
 // CraftBukkit end
 import net.minecraft.util.thread.BlockableEventLoop;
+import io.multipaper.shreddedpaper.ShreddedPaper;
 
 public class PacketUtils {
 
@@ -44,6 +47,33 @@ public class PacketUtils {
     }
 
     public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T listener, BlockableEventLoop<?> engine) throws RunningOnDifferentThreadException {
+        // ShreddedPaper start - run on player's thread
+        if (listener instanceof ServerGamePacketListenerImpl gamePacketListener) {
+            if (TickThread.isTickThreadFor(gamePacketListener.player)) return;
+            ShreddedPaper.runSync(gamePacketListener.player, () -> {
+                if (listener instanceof ServerCommonPacketListenerImpl serverCommonPacketListener && serverCommonPacketListener.processedDisconnect) return; // CraftBukkit - Don't handle sync packets for kicked players
+                if (listener.shouldHandleMessage(packet)) {
+                    co.aikar.timings.Timing timing = co.aikar.timings.MinecraftTimings.getPacketTiming(packet); // Paper - timings
+                    try { // Paper - timings // Purpur
+                        packet.handle(listener);
+                    } catch (Exception exception) {
+                        if (exception instanceof ReportedException) {
+                            ReportedException reportedexception = (ReportedException) exception;
+
+                            if (reportedexception.getCause() instanceof OutOfMemoryError) {
+                                throw PacketUtils.makeReportedException(exception, packet, listener);
+                            }
+                        }
+
+                        listener.onPacketError(packet, exception);
+                    }
+                } else {
+                    PacketUtils.LOGGER.debug("Ignoring packet due to disconnection: {}", packet);
+                }
+            });
+            throw RunningOnDifferentThreadException.RUNNING_ON_DIFFERENT_THREAD;
+        }
+        // ShreddedPaper end - run on player's thread
         if (!engine.isSameThread()) {
             engine.executeIfPossible(() -> {
                 packetProcessing.push(listener); // Paper - detailed watchdog information
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 975121cd07dd284bcbab65d6a679c2236897e0be..ade6396885d63991640dbee0f7d1a56b02d22397 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,8 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperPlayerTicker;
 import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
@@ -1791,6 +1793,20 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end - Perf: Optimize time updates
         //MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper // Purpur
+        this.getConnection().tick(); // ShreddedPaper - moved up
+
+        // ShreddedPaper start - some players aren't registered in their level if they're dead, let's manually add a task for them to process them
+        for (ServerPlayer player : this.playerList.getPlayers()) {
+            if (player.isRemoved()) {
+                ShreddedPaper.runSync((ServerLevel) player.level(), player.chunkPosition(), () -> {
+                    if (TickThread.isTickThreadFor(player)) {
+                        player.getBukkitEntity().taskScheduler.executeTick();
+                        ShreddedPaperPlayerTicker.tickPlayer(player);
+                    }
+                });
+            }
+        }
+        // ShreddedPaper end
 
         this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked
         Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; move down
@@ -1841,7 +1857,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         //this.profiler.popPush("connection"); // Purpur
         // MinecraftTimings.connectionTimer.startTiming(); // Spigot // Paper // Purpur
-        this.getConnection().tick();
+        // this.getConnection().tick(); // ShreddedPaper - move up
         // MinecraftTimings.connectionTimer.stopTiming(); // Spigot // Paper // Purpur
         //this.profiler.popPush("players"); // Purpur
         //MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper // Purpur
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 3198cc0eaad8e7d3e5daca8531d345951030e948..553d88739ae174963ee840f8a3aafa80654d45ab 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -30,6 +30,7 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -702,7 +703,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.convertable = convertable_conversionsession;
         this.uuid = WorldUUID.getUUID(convertable_conversionsession.levelDirectory.path().toFile());
         // CraftBukkit end
-        this.players = Lists.newArrayList();
+        this.players = new CopyOnWriteArrayList<>(); // ShreddedPaper - thread-safe (players should not be changing worlds often, thus copy-on-write is sufficient)
         // this.entityTickList = new EntityTickList(); // ShreddedPaper - moved into each region
         this.blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
         this.fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
@@ -2782,6 +2783,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             // ServerLevel.this.getChunkSource().addEntity(entity); // Paper - ignore and warn about illegal addEntity calls instead of crashing server; moved down below valid=true
             if (entity instanceof ServerPlayer entityplayer) {
                 ServerLevel.this.players.add(entityplayer);
+                ServerLevel.this.getChunkSource().tickingRegions.addPlayer(entityplayer); // ShreddedPaper - add player to region
                 ServerLevel.this.updateSleepingPlayerList();
             }
 
@@ -2863,6 +2865,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             ServerLevel.this.getChunkSource().removeEntity(entity);
             if (entity instanceof ServerPlayer entityplayer) {
                 ServerLevel.this.players.remove(entityplayer);
+                ServerLevel.this.getChunkSource().tickingRegions.removePlayer(entityplayer); // ShreddedPaper - remove player from region
                 ServerLevel.this.updateSleepingPlayerList();
             }
 
@@ -2902,6 +2905,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         public void onSectionChange(Entity entity) {
             entity.updateDynamicGameEventListener(DynamicGameEventListener::move);
             ServerLevel.this.chunkSource.tickingRegions.moveTickingEntity(entity); // ShreddedPaper - move ticking entity into the new region
+            if (entity instanceof ServerPlayer serverPlayer) ServerLevel.this.chunkSource.tickingRegions.movePlayer(serverPlayer); // ShreddedPaper - move player into the new region
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 4a29e90ff2a0fe9c5be094400d79ab89e61c437d..ca36526379158b027b3ccebb78c0a0f4978a2c40 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -16,8 +16,11 @@ import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.TickThread;
 import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
@@ -194,6 +197,7 @@ import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.event.player.PlayerToggleSneakEvent;
 import org.bukkit.inventory.MainHand;
+import io.multipaper.shreddedpaper.ShreddedPaper;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -245,6 +249,7 @@ public class ServerPlayer extends Player {
     private Vec3 enteredLavaOnVehiclePosition;
     private SectionPos lastSectionPos;
     private ChunkTrackingView chunkTrackingView;
+    public ChunkPos previousChunkPosRegion; // ShreddedPaper
     private ResourceKey<Level> respawnDimension;
     @Nullable
     private BlockPos respawnPosition;
@@ -501,7 +506,7 @@ public class ServerPlayer extends Player {
     }
     // CraftBukkit end
 
-    public void fudgeSpawnLocation(ServerLevel world) {
+    public void fudgeSpawnLocation(ServerLevel world, Runnable onComplete) { // ShreddedPaper - run on region's thread
         BlockPos blockposition = world.getSharedSpawnPos();
 
         if (world.dimensionType().hasSkyLight() && world.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
@@ -522,28 +527,46 @@ public class ServerPlayer extends Player {
             int j1 = this.getCoprime(i1);
             int k1 = RandomSource.create().nextInt(i1);
 
-            for (int l1 = 0; l1 < i1; ++l1) {
-                int i2 = (k1 + j1 * l1) % i1;
-                int j2 = i2 % (i * 2 + 1);
-                int k2 = i2 / (i * 2 + 1);
-                BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(world, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i);
+            this.findSpawnLocation(world, blockposition, i, i1, j1, k1, 0, onComplete); // ShreddedPaper - run on region's thread
+        } else {
+            // ShreddedPaper start - run on region's thread
+            ShreddedPaper.ensureSync(world, blockposition, () -> {
+                this.moveTo(blockposition, world.getSharedSpawnAngle(), 0.0F); // Paper - MC-200092 - fix first spawn pos yaw being ignored
 
-                if (blockposition1 != null) {
-                    this.moveTo(blockposition1, world.getSharedSpawnAngle(), 0.0F); // Paper - MC-200092 - fix first spawn pos yaw being ignored
-                    if (world.noCollision(this, this.getBoundingBox(), true)) { // Paper - make sure this loads chunks, we default to NOT loading now
-                        break;
-                    }
+                while (!world.noCollision(this, this.getBoundingBox(), true) && this.getY() < (double) (world.getMaxBuildHeight() - 1)) { // Paper - make sure this loads chunks, we default to NOT loading now
+                    this.setPos(this.getX(), this.getY() + 1.0D, this.getZ());
                 }
-            }
-        } else {
-            this.moveTo(blockposition, world.getSharedSpawnAngle(), 0.0F); // Paper - MC-200092 - fix first spawn pos yaw being ignored
+            });
+            // ShreddedPaper end - run on region's thread
+        }
 
-            while (!world.noCollision(this, this.getBoundingBox(), true) && this.getY() < (double) (world.getMaxBuildHeight() - 1)) { // Paper - make sure this loads chunks, we default to NOT loading now
-                this.setPos(this.getX(), this.getY() + 1.0D, this.getZ());
-            }
+    }
+
+    // ShreddedPaper start - run on region's thread
+    private void findSpawnLocation(ServerLevel world, BlockPos blockposition, int i, int i1, int j1, int k1, int l1, Runnable onComplete) {
+        if (l1 >= i1) {
+            onComplete.run();
+            return;
         }
 
+        int i2 = (k1 + j1 * l1) % i1;
+        int j2 = i2 % (i * 2 + 1);
+        int k2 = i2 / (i * 2 + 1);
+        ShreddedPaper.ensureSync(world, new BlockPos(blockposition.getX() + j2 - i, 0, blockposition.getZ() + k2 - i), () -> {
+            BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(world, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i);
+
+            if (blockposition1 != null) {
+                this.moveTo(blockposition1, world.getSharedSpawnAngle(), 0.0F); // Paper - MC-200092 - fix first spawn pos yaw being ignored
+                if (world.noCollision(this, this.getBoundingBox(), true)) { // Paper - make sure this loads chunks, we default to NOT loading now
+                    onComplete.run();
+                    return;
+                }
+            }
+
+            this.findSpawnLocation(world, blockposition, i, i1, j1, k1, l1 + 1, onComplete);
+        });
     }
+    // ShreddedPaper end
 
     private int getCoprime(int horizontalSpawnArea) {
         return horizontalSpawnArea <= 16 ? horizontalSpawnArea - 1 : 17;
diff --git a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index dcc3cb2c476831d6093928ce0a14424634b100ec..efd4456c59c51862ffaf0c17d5b49514a93a7b57 100644
--- a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -4,6 +4,10 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
 import java.util.Objects;
 import javax.annotation.Nullable;
+
+import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.papermc.paper.util.TickThread;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -143,7 +147,7 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
             // Paper start - This needs to be handled on the main thread for plugins
-            server.submit(() -> {
+            ShreddedPaper.runSync(this.player, () -> { // ShreddedPaper - run on player's thread
                 this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
             });
             // Paper end - This needs to be handled on the main thread for plugins
@@ -382,7 +386,7 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         if (this.processedDisconnect) {
             return;
         }
-        if (!this.cserver.isPrimaryThread()) {
+        if (!TickThread.isTickThreadFor(this.player)) { // ShreddedPaper - run on player's thread
             Waitable waitable = new Waitable() {
                 @Override
                 protected Object evaluate() {
@@ -391,9 +395,16 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
                 }
             };
 
-            this.server.processQueue.add(waitable);
+            // ShreddedPaper start - run on player's thread
+            if (TickThread.isTickThread()) {
+                this.player.serverLevel().chunkSource.tickingRegions.execute(RegionPos.forChunk(this.player.chunkPosition()), waitable);
+            } else {
+                ShreddedPaper.runSync(this.player, waitable); // this.server.processQueue.add(waitable);
+            }
+            // ShreddedPaper end - run on player's thread
 
             try {
+                if (TickThread.isTickThread()) this.player.serverLevel().chunkSource.mainThreadProcessor.managedBlock(waitable::isDone); // ShreddedPaper - don't block when waiting
                 waitable.get();
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt();
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 176e54f1c5f4feb98bee8876c304f6e248909e9c..ca7895a57139352d2f1c522dc7b64b62dc679c4c 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -7,6 +7,7 @@ import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.ShreddedPaper;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -2148,9 +2149,11 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
             this.processedDisconnect = true;
         }
         // CraftBukkit end
+        player.getBukkitEntity().taskScheduler.schedule(e -> { // ShreddedPaper - run on player's thread
         ServerGamePacketListenerImpl.LOGGER.info("{} lost connection: {}", this.player.getName().getString(), reason.getString());
         this.removePlayerFromWorld(quitMessage); // Paper - Fix kick event leave message not being sent
         super.onDisconnect(reason, quitMessage); // Paper - Fix kick event leave message not being sent
+        }, e -> LOGGER.error("Failed to run disconnect task for player {}", player.getName().getString(), new Exception("Disconnect task retired")), 1); // ShreddedPaper - run on player's thread
     }
 
     // Paper start - Fix kick event leave message not being sent
@@ -2418,7 +2421,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
             this.player.resetLastActionTime();
             // CraftBukkit start
             if (sync) {
-                this.server.execute(runnable);
+                ShreddedPaper.runSync(player, runnable); // ShreddedPaper - run on player's thread
             } else {
                 runnable.run();
             }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index b863f6fe65c796a1d3102cc3eddb5d6c5becd3ac..900891527ca401858d9c2678ae154928e5f64b08 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -122,6 +122,7 @@ import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
 import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
 import org.bukkit.event.player.PlayerSpawnChangeEvent;
+import io.multipaper.shreddedpaper.ShreddedPaper;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -258,10 +259,20 @@ public abstract class PlayerList {
             player.spawnReason = org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT; // set Player SpawnReason to DEFAULT on first login
             // Paper start - reset to main world spawn if first spawn or invalid world
         }
+        // ShreddedPaper start - join the region's thread
+        String finalS = s;
+        Runnable onComplete = () -> placeNewPlayer2(connection, player, clientData, worldserver1, optional, finalS);
         if (optional.isEmpty() || invalidPlayerWorld[0]) {
             // Paper end - reset to main world spawn if first spawn or invalid world
-            player.fudgeSpawnLocation(worldserver1); // Paper - Don't move existing players to world spawn
+            player.fudgeSpawnLocation(worldserver1, onComplete); // Paper - Don't move existing players to world spawn // ShreddedPaper - join the region's thread
+        } else {
+            ShreddedPaper.ensureSync(worldserver1, player.blockPosition(), onComplete);
         }
+    }
+
+    public void placeNewPlayer2(Connection connection, ServerPlayer player, CommonListenerCookie clientData, ServerLevel worldserver1, Optional<CompoundTag> optional, String s) {
+        // ShreddedPaper end - join the region's thread
+
         // Paper end - Entity#getEntitySpawnReason
         player.setServerLevel(worldserver1);
         String s1 = connection.getLoggableAddress(this.server.logIPs());
@@ -272,6 +283,13 @@ public abstract class PlayerList {
         this.cserver.getPluginManager().callEvent(ev);
 
         Location loc = ev.getSpawnLocation();
+        // ShreddedPaper start - join the region's thread
+        ShreddedPaper.ensureSync(loc, () -> placeNewPlayer3(connection, player, clientData, worldserver1, loc, optional, s, s1));
+    }
+
+    public void placeNewPlayer3(Connection connection, ServerPlayer player, CommonListenerCookie clientData, ServerLevel worldserver1, Location loc, Optional<CompoundTag> optional, String s, String s1) {
+        // ShreddedPaper end - join the region's thread
+
         worldserver1 = ((CraftWorld) loc.getWorld()).getHandle();
 
         player.spawnIn(worldserver1);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Waitable.java b/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
index 864a213adaef77cf24327ed5de61cd5cae10176d..fa4b350d42a773843f45bfdda5fbc8c579a251fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
@@ -33,6 +33,12 @@ public abstract class Waitable<T> implements Runnable {
 
     protected abstract T evaluate();
 
+    // ShreddedPaper start
+    public boolean isDone() {
+        return this.status == Status.FINISHED;
+    }
+    // ShreddedPaper end
+
     public synchronized T get() throws InterruptedException, ExecutionException {
         while (this.status != Status.FINISHED) {
             this.wait();
