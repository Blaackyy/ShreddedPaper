From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 30 May 2024 20:37:51 +0900
Subject: [PATCH] Threaded chunk changes broadcasting


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index 536d3bec3aeaf60812ae1767cca4db3a76ca36cd..7d870c30cc5bb2e1da5f06622d49571323fd23c7 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -5,6 +5,7 @@ import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Mob;
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChangesBroadcaster.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChangesBroadcaster.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad7960c9a11cffc4b89a08dac45dd0056d12d668
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChangesBroadcaster.java
@@ -0,0 +1,53 @@
+package io.multipaper.shreddedpaper.threading;
+
+import io.papermc.paper.util.TickThread;
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import net.minecraft.server.level.ChunkHolder;
+
+public class ShreddedPaperChangesBroadcaster {
+
+    private static final ThreadLocal<ReferenceOpenHashSet<ChunkHolder>> needsChangeBroadcastingThreadLocal = new ThreadLocal<>();
+
+    public static void setAsWorkerThread() {
+        if (needsChangeBroadcastingThreadLocal.get() == null) {
+            needsChangeBroadcastingThreadLocal.set(new ReferenceOpenHashSet<>());
+        }
+    }
+
+    public static void add(ChunkHolder chunkHolder) {
+        ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting = needsChangeBroadcastingThreadLocal.get();
+        if (needsChangeBroadcasting != null) {
+            needsChangeBroadcasting.add(chunkHolder);
+        }
+    }
+
+    public static void remove(ChunkHolder chunkHolder) {
+        ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting = needsChangeBroadcastingThreadLocal.get();
+        if (needsChangeBroadcasting != null) {
+            needsChangeBroadcasting.remove(chunkHolder);
+        }
+    }
+
+    public static void broadcastChanges() {
+        broadcastChanges(needsChangeBroadcastingThreadLocal.get());
+    }
+
+    public static void broadcastChanges(ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting) {
+        if (!needsChangeBroadcasting.isEmpty()) {
+            ReferenceOpenHashSet<ChunkHolder> copy = needsChangeBroadcasting.clone();
+            needsChangeBroadcasting.clear();
+            for (ChunkHolder holder : copy) {
+                if (!TickThread.isTickThreadFor(holder.newChunkHolder.world, holder.pos)) {
+                    // The changes will get picked up by the correct thread when it is ticked
+                    continue;
+                }
+
+                holder.broadcastChanges(holder.getFullChunkNowUnchecked()); // LevelChunks are NEVER unloaded
+                if (holder.needsBroadcastChanges()) {
+                    // I DON'T want to KNOW what DUMB plugins might be doing.
+                    needsChangeBroadcasting.add(holder);
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index 70ad27ec2b30343fd36164b54c9508e0dc18092a..9bd5b536563db858f9ad8ddee5b5e547cb91bc7b 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -63,6 +63,8 @@ public class ShreddedPaperChunkTicker {
                 throw new IllegalStateException("Ticking region " + level.convertable.getLevelId() + " " + region.getRegionPos() + " outside of ShreddedPaperTickThread!");
             }
 
+            ShreddedPaperChangesBroadcaster.setAsWorkerThread();
+
             while (region.getInternalTaskQueue().executeTask()) ;
 
             level.chunkTaskScheduler.chunkHolderManager.processUnloads(region);
@@ -80,6 +82,8 @@ public class ShreddedPaperChunkTicker {
 
             while (region.getInternalTaskQueue().executeTask()) ;
 
+            ShreddedPaperChangesBroadcaster.broadcastChanges();
+
             if (region.isEmpty()) {
                 level.chunkSource.tickingRegions.remove(region.getRegionPos());
             }
@@ -95,6 +99,8 @@ public class ShreddedPaperChunkTicker {
             }
         });
 
+        if (chunk1.getChunkHolder().vanillaChunkHolder.needsBroadcastChanges()) ShreddedPaperChangesBroadcaster.add(chunk1.getChunkHolder().vanillaChunkHolder); // ShreddedPaper
+
         // Start - Import the same variables as the original chunk ticking method to make copying new changes easier
         int j = 1; // Inhabited time increment in ticks
         boolean flag = level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !level.players().isEmpty(); // Should run mob spawning code
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 0e0c3a010d5cfaa0c15bcb38c4e3b1a8d7ad39a1..8da6278f841e0ac032ae74ed75b7689d43e2cdfb 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -2,6 +2,7 @@ package net.minecraft.server.level;
 
 import com.mojang.datafixers.util.Pair;
 import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperChangesBroadcaster;
 import io.papermc.paper.util.TickThread;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
@@ -81,7 +82,7 @@ public class ChunkHolder {
     public void onChunkAdd() {
         // Paper start - optimise chunk tick iteration
         if (this.needsBroadcastChanges()) {
-            this.chunkMap.needsChangeBroadcasting.add(this);
+            ShreddedPaperChangesBroadcaster.add(this); // this.chunkMap.needsChangeBroadcasting.add(this); // ShreddedPaper - handled by the regions
         }
         // Paper end - optimise chunk tick iteration
     }
@@ -89,7 +90,7 @@ public class ChunkHolder {
     public void onChunkRemove() {
         // Paper start - optimise chunk tick iteration
         if (this.needsBroadcastChanges()) {
-            this.chunkMap.needsChangeBroadcasting.remove(this);
+            ShreddedPaperChangesBroadcaster.remove(this); // this.chunkMap.needsChangeBroadcasting.remove(this); // ShreddedPaper - handled by the regions
         }
         // Paper end - optimise chunk tick iteration
     }
@@ -275,7 +276,7 @@ public class ChunkHolder {
 
     private void addToBroadcastMap() {
         io.papermc.paper.util.TickThread.ensureTickThread(this.chunkMap.level, this.pos, "Asynchronous ChunkHolder update is not allowed");
-        this.chunkMap.needsChangeBroadcasting.add(this);
+        ShreddedPaperChangesBroadcaster.add(this); // this.chunkMap.needsChangeBroadcasting.add(this); // ShreddedPaper - handled by the regions
     }
     // Paper end - optimise chunk tick iteration
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 8af60eb241ed2315baa0c531e48a2ddcb04ae588..db14df2f214e60dd5f450b8fc42ed786ae2bda89 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -248,7 +248,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public final io.papermc.paper.util.player.NearbyPlayers nearbyPlayers;
     // Paper end
     // Paper start - optimise chunk tick iteration
-    public final it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<>();
+    // public final it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<>(); // ShreddedPaper - handled in the region
     public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerMobSpawnMap = new gg.pufferfish.pufferfish.util.AsyncPlayerAreaMap(this.pooledLinkedPlayerHashSets); // Pufferfish
     // Paper end - optimise chunk tick iteration
 
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index a41816c6f0ca2d68a2eea25f513c8e10956d7813..69c1c5f5af8d8d13fb0802eb4b25c1708deeb52e 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -15,6 +15,7 @@ import java.util.function.Supplier;
 import javax.annotation.Nullable;
 
 import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperChangesBroadcaster;
 import io.papermc.paper.util.TickThread;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -678,17 +679,19 @@ public class ServerChunkCache extends ChunkSource {
             // Paper - optimise chunk tick iteration
                 //this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timing // Purpur
             // Paper start - optimise chunk tick iteration
-            if (!this.chunkMap.needsChangeBroadcasting.isEmpty()) {
-                it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<ChunkHolder> copy = this.chunkMap.needsChangeBroadcasting.clone();
-                this.chunkMap.needsChangeBroadcasting.clear();
-                for (ChunkHolder holder : copy) {
-                    holder.broadcastChanges(holder.getFullChunkNowUnchecked()); // LevelChunks are NEVER unloaded
-                    if (holder.needsBroadcastChanges()) {
-                        // I DON'T want to KNOW what DUMB plugins might be doing.
-                        this.chunkMap.needsChangeBroadcasting.add(holder);
-                    }
-                }
-            }
+            // ShreddedPaper start -  // ShreddedPaper - handled in the region
+//            if (!this.chunkMap.needsChangeBroadcasting.isEmpty()) {
+//                it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<ChunkHolder> copy = this.chunkMap.needsChangeBroadcasting.clone();
+//                this.chunkMap.needsChangeBroadcasting.clear();
+//                for (ChunkHolder holder : copy) {
+//                    holder.broadcastChanges(holder.getFullChunkNowUnchecked()); // LevelChunks are NEVER unloaded
+//                    if (holder.needsBroadcastChanges()) {
+//                        // I DON'T want to KNOW what DUMB plugins might be doing.
+//                        this.chunkMap.needsChangeBroadcasting.add(holder);
+//                    }
+//                }
+//            }
+            // ShreddedPaper end - handled in the region
             // Paper end - optimise chunk tick iteration
                 //this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timing // Purpur
             // Paper - optimise chunk tick iteration
