From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 21 Aug 2024 18:33:56 +0900
Subject: [PATCH] Run some packets immediately


diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java
index 3949e39afcf36c4c5012e157ce95fd4d873126b5..f43f47ae37866b6edff7ca616cbd044621c29449 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperTickThread.java
@@ -5,6 +5,7 @@ import io.papermc.paper.util.TickThread;
 import org.slf4j.Logger;
 import io.multipaper.shreddedpaper.config.ShreddedPaperConfiguration;
 
+import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -38,7 +39,7 @@ public class ShreddedPaperTickThread extends TickThread {
         return Thread.currentThread() instanceof ShreddedPaperTickThread;
     }
 
-    static ScheduledThreadPoolExecutor getExecutor() {
+    public static ScheduledThreadPoolExecutor getExecutor() {
         return executor;
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index f5154194df9e44f8bcf431029f4bbed68db49658..3e18c6d3f463ecbbc0a65991b6afc6ffbdf2d1dc 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -1,11 +1,14 @@
 package net.minecraft.network.protocol;
 
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperTickThread;
 import io.papermc.paper.util.TickThread;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.network.PacketListener;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import org.slf4j.Logger;
 
@@ -18,6 +21,8 @@ import net.minecraft.server.network.ServerCommonPacketListenerImpl;
 import net.minecraft.util.thread.BlockableEventLoop;
 import io.multipaper.shreddedpaper.ShreddedPaper;
 
+import java.util.concurrent.atomic.AtomicBoolean;
+
 public class PacketUtils {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -42,6 +47,49 @@ public class PacketUtils {
 
     public PacketUtils() {}
 
+    // ShreddedPaper start - run on player's thread
+    public static <T extends PacketListener> void executeImmediatelyOnSameThread(Packet<T> packet, T listener, ServerLevel world) throws RunningOnDifferentThreadException {
+        if (listener instanceof ServerGamePacketListenerImpl gamePacketListener) {
+            if (TickThread.isTickThreadFor(gamePacketListener.player)) return;
+            AtomicBoolean hasRun = new AtomicBoolean(false);
+            Runnable runnable = () -> {
+                if (!hasRun.compareAndSet(false, true)) return; // Only run once
+                if (listener instanceof ServerCommonPacketListenerImpl serverCommonPacketListener && serverCommonPacketListener.processedDisconnect) return; // CraftBukkit - Don't handle sync packets for kicked players
+                if (listener.shouldHandleMessage(packet)) {
+                    co.aikar.timings.Timing timing = co.aikar.timings.MinecraftTimings.getPacketTiming(packet); // Paper - timings
+                    try { // Paper - timings // Purpur
+                        packet.handle(listener);
+                    } catch (Exception exception) {
+                        if (exception instanceof ReportedException) {
+                            ReportedException reportedexception = (ReportedException) exception;
+
+                            if (reportedexception.getCause() instanceof OutOfMemoryError) {
+                                throw PacketUtils.makeReportedException(exception, packet, listener);
+                            }
+                        }
+
+                        listener.onPacketError(packet, exception);
+                    }
+                } else {
+                    PacketUtils.LOGGER.debug("Ignoring packet due to disconnection: {}", packet);
+                }
+            };
+
+            // One of these will run first, we don't know which, so schedule them both and let's see!
+            // 1. Try running on the player's thread asap
+            ShreddedPaperTickThread.getExecutor().execute(() -> {
+                if (hasRun.get()) return; // Has already run, don't waste resources trying to lock again
+                ServerPlayer player = gamePacketListener.player;
+                player.serverLevel().chunkScheduler.getRegionLocker().tryLockNow(RegionPos.forChunk(player.chunkPosition()), runnable);
+            });
+            // 2. Queue the runnable to run on the player's thread during the next tick
+            ShreddedPaper.runSync(gamePacketListener.player, runnable);
+
+            throw RunningOnDifferentThreadException.RUNNING_ON_DIFFERENT_THREAD;
+        }
+    }
+    // ShreddedPaper end - run on player's thread
+
     public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T listener, ServerLevel world) throws RunningOnDifferentThreadException {
         PacketUtils.ensureRunningOnSameThread(packet, listener, (BlockableEventLoop) world.getServer());
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index ee8f2fce3b6b2ddd6fb7a767a30dcf4d0e4888e7..e7573b40004b26c981ed861b50118d95f639297e 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -8,6 +8,7 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.logging.LogUtils;
 import io.multipaper.shreddedpaper.ShreddedPaper;
+import io.multipaper.shreddedpaper.config.ShreddedPaperConfiguration;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -1979,6 +1980,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket packet) {
+        if (ShreddedPaperConfiguration.get().multithreading.executeRightClickPacketsImmediately) PacketUtils.executeImmediatelyOnSameThread(packet, this, this.player.serverLevel()); // ShreddedPaper
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         if (!this.checkLimit(packet.timestamp)) return; // Spigot - check limit
