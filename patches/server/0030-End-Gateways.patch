From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 5 Jun 2024 00:49:15 +0900
Subject: [PATCH] End Gateways


diff --git a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
index fb9611866671880fc7a1a969da928b8f2ad15269..e7ced465076195f1c774a2f5ddd690162f5d50e3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -3,7 +3,11 @@ package net.minecraft.world.level.block.entity;
 import com.mojang.logging.LogUtils;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
 import javax.annotation.Nullable;
+
+import io.multipaper.shreddedpaper.region.RegionPos;
+import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionScheduler;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -177,17 +181,22 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
             }
             // Purpur end
             blockEntity.teleportCooldown = 100;
-            BlockPos blockposition1;
+            CompletableFuture<BlockPos> blockpositionfuture = CompletableFuture.completedFuture(blockEntity.exitPortal); // ShreddedPaper
 
             if (blockEntity.exitPortal == null && world.getTypeKey() == LevelStem.END) { // CraftBukkit - work in alternate worlds
-                blockposition1 = TheEndGatewayBlockEntity.findOrCreateValidTeleportPos(worldserver, pos);
-                blockposition1 = blockposition1.above(10);
+                blockpositionfuture = TheEndGatewayBlockEntity.findOrCreateValidTeleportPos(worldserver, pos); // ShreddedPaper
+                blockpositionfuture = blockpositionfuture.thenApply(blockposition1 -> blockposition1.above(10)); // ShreddedPaper
+                blockpositionfuture.thenAccept(blockposition1 -> { // ShreddedPaper
                 TheEndGatewayBlockEntity.LOGGER.debug("Creating portal at {}", blockposition1);
                 TheEndGatewayBlockEntity.spawnGatewayPortal(worldserver, blockposition1, EndGatewayConfiguration.knownExit(pos, false));
                 blockEntity.exitPortal = blockposition1;
+                }); // ShreddedPaper
             }
 
-            if (blockEntity.exitPortal != null) {
+            blockpositionfuture.thenRun(() -> { // ShreddedPaper
+                if (blockEntity.exitPortal == null) return; // ShreddedPaper
+                ShreddedPaperRegionScheduler.scheduleAcrossLevels(worldserver, RegionPos.forChunk(entity.chunkPosition()), worldserver, RegionPos.forBlockPos(blockEntity.exitPortal), () -> { // ShreddedPaper
+                BlockPos blockposition1; // ShreddedPaper
                 blockposition1 = blockEntity.exactTeleport ? blockEntity.exitPortal : TheEndGatewayBlockEntity.findExitPosition(world, blockEntity.exitPortal);
                 Entity entity1;
 
@@ -243,7 +252,8 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
                 entity1.setPortalCooldown();
                 entity1.teleportToWithTicket(teleEvent.getTo().getX(), teleEvent.getTo().getY(), teleEvent.getTo().getZ());
                 // CraftBukkit end
-            }
+                }); // ShreddedPaper
+            }); // ShreddedPaper
 
             TheEndGatewayBlockEntity.triggerCooldown(world, pos, state, blockEntity);
         }
@@ -256,8 +266,9 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
         return blockposition1.above();
     }
 
-    private static BlockPos findOrCreateValidTeleportPos(ServerLevel world, BlockPos pos) {
+    private static CompletableFuture<BlockPos> findOrCreateValidTeleportPos(ServerLevel world, BlockPos pos) { // ShreddedPaper
         Vec3 vec3d = TheEndGatewayBlockEntity.findExitPortalXZPosTentative(world, pos);
+        return world.getWorld().getChunkAtAsyncUrgently((int) vec3d.x >> 4, (int) vec3d.z >> 4).thenApply(bukkitChunk -> { // ShreddedPaper - run on region's thread for write access
         LevelChunk chunk = TheEndGatewayBlockEntity.getChunk(world, vec3d);
         BlockPos blockposition1 = TheEndGatewayBlockEntity.findValidSpawnInChunk(chunk);
 
@@ -276,6 +287,7 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
         }
 
         return TheEndGatewayBlockEntity.findTallestBlock(world, blockposition1, 16, true);
+        }); // ShreddedPaper
     }
 
     private static Vec3 findExitPortalXZPosTentative(ServerLevel world, BlockPos pos) {
