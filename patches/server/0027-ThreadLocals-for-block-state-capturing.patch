From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 30 May 2024 21:47:29 +0900
Subject: [PATCH] ThreadLocals for block state capturing


diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index 68236139e3571791b891dbbef6e3ee20031e16d9..40af9033d213527950de6522f5d5d97e472faaf6 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -634,7 +634,7 @@ public interface DispenseItemBehavior {
                     }
                 }
 
-                worldserver.captureTreeGeneration = true;
+                worldserver.captureTreeGeneration.set(true); // ShreddedPaper - thread local
                 // CraftBukkit end
 
                 if (!BoneMealItem.growCrop(stack, worldserver, blockposition) && !BoneMealItem.growWaterPlant(stack, worldserver, blockposition, (Direction) null)) {
@@ -643,13 +643,13 @@ public interface DispenseItemBehavior {
                     worldserver.levelEvent(1505, blockposition, 15);
                 }
                 // CraftBukkit start
-                worldserver.captureTreeGeneration = false;
-                if (worldserver.capturedBlockStates.size() > 0) {
+                worldserver.captureTreeGeneration.set(false); // ShreddedPaper - thread local
+                if (worldserver.capturedBlockStates.get().size() > 0) { // ShreddedPaper - thread local
                     TreeType treeType = SaplingBlock.treeType;
                     SaplingBlock.treeType = null;
                     Location location = CraftLocation.toBukkit(blockposition, worldserver.getWorld());
-                    List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(worldserver.capturedBlockStates.values());
-                    worldserver.capturedBlockStates.clear();
+                    List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(worldserver.capturedBlockStates.get().values()); // ShreddedPaper - thread local
+                    worldserver.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
                     StructureGrowEvent structureEvent = null;
                     if (treeType != null) {
                         structureEvent = new StructureGrowEvent(location, treeType, false, null, blocks);
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 6c75198bbcac7de6f688348f00cbe9bd58d9fc8e..809681dd4e758c46e41e41f19ce29dbf7835f876 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1771,8 +1771,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
         } else {
             if (entity instanceof net.minecraft.world.entity.item.ItemEntity itemEntity && itemEntity.getItem().isEmpty()) return false; // Paper - Prevent empty items from being added
             // Paper start - capture all item additions to the world
-            if (captureDrops != null && entity instanceof net.minecraft.world.entity.item.ItemEntity) {
-                captureDrops.add((net.minecraft.world.entity.item.ItemEntity) entity);
+            if (captureDrops.get() != null && entity instanceof net.minecraft.world.entity.item.ItemEntity) { // ShreddedPaper - thread local
+                captureDrops.get().add((net.minecraft.world.entity.item.ItemEntity) entity); // ShreddedPaper - thread local
                 return true;
             }
             // Paper end - capture all item additions to the world
@@ -1982,7 +1982,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @Override
     public void updateNeighborsAt(BlockPos pos, Block sourceBlock) {
-        if (captureBlockStates) { return; } // Paper - Cancel all physics during placement
+        if (captureBlockStates.get()) { return; } // Paper - Cancel all physics during placement // ShreddedPaper - thread local
         this.neighborUpdater.updateNeighborsAtExceptFromFacing(pos, sourceBlock, (Direction) null);
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 7424246750d6ceca1acd5d9ebfd48f0d66504c5d..fcfd4fb1e3d7e17a6039dc6bc85414dc1614be08 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -420,7 +420,7 @@ public class ServerPlayerGameMode {
             } else {
                 // CraftBukkit start
                 org.bukkit.block.BlockState state = bblock.getState();
-                this.level.captureDrops = new ArrayList<>();
+                this.level.captureDrops.set(new ArrayList<>()); // ShreddedPaper - thread local
                 // CraftBukkit end
                 BlockState iblockdata1 = block.playerWillDestroy(this.level, pos, iblockdata, this.player);
                 boolean flag = this.level.removeBlock(pos, false);
@@ -448,8 +448,8 @@ public class ServerPlayerGameMode {
                     // return true; // CraftBukkit
                 }
                 // CraftBukkit start
-                java.util.List<net.minecraft.world.entity.item.ItemEntity> itemsToDrop = this.level.captureDrops; // Paper - capture all item additions to the world
-                this.level.captureDrops = null; // Paper - capture all item additions to the world; Remove this earlier so that we can actually drop stuff
+                java.util.List<net.minecraft.world.entity.item.ItemEntity> itemsToDrop = this.level.captureDrops.get(); // Paper - capture all item additions to the world // ShreddedPaper - thread local
+                this.level.captureDrops.set(null); // Paper - capture all item additions to the world; Remove this earlier so that we can actually drop stuff // ShreddedPaper - thread local
                 if (event.isDropItems()) {
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDropItemEvent(bblock, state, this.player, itemsToDrop); // Paper - capture all item additions to the world
                 }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 4934e912653361dc4af8306d3747850c0c0f4554..1fd3ebf7527ce2b94155f049040180f771b1f863 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -402,29 +402,29 @@ public final class ItemStack implements DataComponentHolder {
             ServerLevel world = (ServerLevel) context.getLevel();
 
             if (!(item instanceof BucketItem/* || item instanceof SolidBucketItem*/)) { // if not bucket // Paper - Fix cancelled powdered snow bucket placement
-                world.captureBlockStates = true;
+                world.captureBlockStates.set(true); // ShreddedPaper - thread local
                 // special case bonemeal
                 if (item == Items.BONE_MEAL) {
-                    world.captureTreeGeneration = true;
+                    world.captureTreeGeneration.set(true); // ShreddedPaper - thread local
                 }
             }
             InteractionResult enuminteractionresult;
             try {
                 enuminteractionresult = item.useOn(context);
             } finally {
-                world.captureBlockStates = false;
+                world.captureBlockStates.set(false); // ShreddedPaper - thread local
             }
             DataComponentPatch newData = this.components.asPatch(); // Paper - Directly access components as patch instead of getComponentsPatch as said method yields EMPTY on items with count 0
             int newCount = this.getCount();
             this.setCount(oldCount);
             this.restorePatch(oldData);
-            if (enuminteractionresult.consumesAction() && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
-                world.captureTreeGeneration = false;
+            if (enuminteractionresult.consumesAction() && world.captureTreeGeneration.get() && world.capturedBlockStates.get().size() > 0) { // ShreddedPaper - thread local
+                world.captureTreeGeneration.set(false); // ShreddedPaper - thread local
                 Location location = CraftLocation.toBukkit(blockposition, world.getWorld());
                 TreeType treeType = SaplingBlock.treeType;
                 SaplingBlock.treeType = null;
-                List<CraftBlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
-                world.capturedBlockStates.clear();
+                List<CraftBlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.get().values()); // ShreddedPaper - thread local
+                world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
                 StructureGrowEvent structureEvent = null;
                 if (treeType != null) {
                     boolean isBonemeal = this.getItem() == Items.BONE_MEAL;
@@ -453,13 +453,13 @@ public final class ItemStack implements DataComponentHolder {
                 SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
                 return enuminteractionresult;
             }
-            world.captureTreeGeneration = false;
+            world.captureTreeGeneration.set(false); // ShreddedPaper - thread local;
 
             if (entityhuman != null && enuminteractionresult.indicateItemUse()) {
                 InteractionHand enumhand = context.getHand();
                 org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
-                List<BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
-                world.capturedBlockStates.clear();
+                List<BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.get().values()); // ShreddedPaper - thread local
+                world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
                 if (blocks.size() > 1) {
                     placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockMultiPlaceEvent(world, entityhuman, enumhand, blocks, blockposition.getX(), blockposition.getY(), blockposition.getZ());
                 } else if (blocks.size() == 1 && item != Items.POWDER_SNOW_BUCKET) { // Paper - Fix cancelled powdered snow bucket placement
@@ -470,16 +470,16 @@ public final class ItemStack implements DataComponentHolder {
                     enuminteractionresult = InteractionResult.FAIL; // cancel placement
                     // PAIL: Remove this when MC-99075 fixed
                     placeEvent.getPlayer().updateInventory();
-                    world.capturedTileEntities.clear(); // Paper - Allow chests to be placed with NBT data; clear out block entities as chests and such will pop loot
+                    world.capturedTileEntities.get().clear(); // Paper - Allow chests to be placed with NBT data; clear out block entities as chests and such will pop loot // ShreddedPaper - thread local
                     // revert back all captured blocks
-                    world.preventPoiUpdated = true; // CraftBukkit - SPIGOT-5710
-                    world.isBlockPlaceCancelled = true; // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
+                    world.preventPoiUpdated.set(true); // CraftBukkit - SPIGOT-5710 // ShreddedPaper - thread local
+                    world.isBlockPlaceCancelled.set(true); // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent // ShreddedPaper - thread local
                     for (BlockState blockstate : blocks) {
                         blockstate.update(true, false);
                         ((CraftBlock) blockstate.getBlock()).getNMS().getBlock().forgetPlacer(); // Purpur
                     }
-                    world.isBlockPlaceCancelled = false; // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
-                    world.preventPoiUpdated = false;
+                    world.isBlockPlaceCancelled.set(false); // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent // ShreddedPaper - thread local
+                    world.preventPoiUpdated.set(false); // ShreddedPaper - thread local
 
                     // Brute force all possible updates
                     // Paper start - Don't resync blocks
@@ -496,7 +496,7 @@ public final class ItemStack implements DataComponentHolder {
                         this.setCount(newCount);
                     }
 
-                    for (Map.Entry<BlockPos, BlockEntity> e : world.capturedTileEntities.entrySet()) {
+                    for (Map.Entry<BlockPos, BlockEntity> e : world.capturedTileEntities.get().entrySet()) { // ShreddedPaper - thread local
                         world.setBlockEntity(e.getValue());
                     }
 
@@ -584,8 +584,8 @@ public final class ItemStack implements DataComponentHolder {
                     entityhuman.awardStat(Stats.ITEM_USED.get(item));
                 }
             }
-            world.capturedTileEntities.clear();
-            world.capturedBlockStates.clear();
+            world.capturedTileEntities.get().clear(); // ShreddedPaper - thread local
+            world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
             // CraftBukkit end
 
             return enuminteractionresult;
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 97742d2286468c55daf2076f6da1f31a58412c0c..e0802a0d3572268b62034658f0b3dae2c9b3849e 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
@@ -152,13 +153,15 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public boolean pvpMode;
     public org.bukkit.generator.ChunkGenerator generator;
 
-    public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
-    public boolean captureBlockStates = false;
-    public boolean captureTreeGeneration = false;
-    public boolean isBlockPlaceCancelled = false; // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
-    public Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState> capturedBlockStates = new java.util.LinkedHashMap<>(); // Paper
-    public Map<BlockPos, BlockEntity> capturedTileEntities = new java.util.LinkedHashMap<>(); // Paper - Retain block place order when capturing blockstates
-    public List<ItemEntity> captureDrops;
+    // ShreddedPaper start - threading
+    public ThreadLocal<Boolean> preventPoiUpdated = ThreadLocal.withInitial(() -> false); // CraftBukkit - SPIGOT-5710
+    public ThreadLocal<Boolean> captureBlockStates = ThreadLocal.withInitial(() -> false);
+    public ThreadLocal<Boolean> captureTreeGeneration = ThreadLocal.withInitial(() -> false);
+    public ThreadLocal<Boolean> isBlockPlaceCancelled = ThreadLocal.withInitial(() -> false); // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
+    public ThreadLocal<Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState>> capturedBlockStates = ThreadLocal.withInitial(LinkedHashMap::new); // Paper
+    public ThreadLocal<Map<BlockPos, BlockEntity>> capturedTileEntities = ThreadLocal.withInitial(LinkedHashMap::new); // Paper - Retain block place order when capturing blockstates
+    public ThreadLocal<List<ItemEntity>> captureDrops = new ThreadLocal<>();
+    // ShreddedPaper end - threading
     public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
     // Paper start
     public int wakeupInactiveRemainingAnimals;
@@ -884,8 +887,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     @Nullable
     public final BlockState getBlockStateIfLoaded(BlockPos pos) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
-            CraftBlockState previous = this.capturedBlockStates.get(pos);
+        if (this.captureTreeGeneration.get()) { // ShreddedPaper - thread local
+            CraftBlockState previous = this.capturedBlockStates.get().get(pos); // ShreddedPaper - thread local
             if (previous != null) {
                 return previous.getHandle();
             }
@@ -948,15 +951,15 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     @Override
     public boolean setBlock(BlockPos pos, BlockState state, int flags, int maxUpdateDepth) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
+        if (this.captureTreeGeneration.get()) { // ShreddedPaper - thread local
             // Paper start - Protect Bedrock and End Portal/Frames from being destroyed
             BlockState type = getBlockState(pos);
             if (!type.isDestroyable()) return false;
             // Paper end - Protect Bedrock and End Portal/Frames from being destroyed
-            CraftBlockState blockstate = this.capturedBlockStates.get(pos);
+            CraftBlockState blockstate = this.capturedBlockStates.get().get(pos); // ShreddedPaper - thread local
             if (blockstate == null) {
                 blockstate = CapturedBlockState.getTreeBlockState(this, pos, flags);
-                this.capturedBlockStates.put(pos.immutable(), blockstate);
+                this.capturedBlockStates.get().put(pos.immutable(), blockstate); // ShreddedPaper - thread local
             }
             blockstate.setData(state);
             blockstate.setFlag(flags);
@@ -973,10 +976,10 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
             // CraftBukkit start - capture blockstates
             boolean captured = false;
-            if (this.captureBlockStates && !this.capturedBlockStates.containsKey(pos)) {
+            if (this.captureBlockStates.get() && !this.capturedBlockStates.get().containsKey(pos)) { // ShreddedPaper - thread local
                 CraftBlockState blockstate = (CraftBlockState) world.getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState(); // Paper - use CB getState to get a suitable snapshot
                 blockstate.setFlag(flags); // Paper - set flag
-                this.capturedBlockStates.put(pos.immutable(), blockstate);
+                this.capturedBlockStates.get().put(pos.immutable(), blockstate); // ShreddedPaper - thread local
                 captured = true;
             }
             // CraftBukkit end
@@ -986,8 +989,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
             if (iblockdata1 == null) {
                 // CraftBukkit start - remove blockstate if failed (or the same)
-                if (this.captureBlockStates && captured) {
-                    this.capturedBlockStates.remove(pos);
+                if (this.captureBlockStates.get() && captured) { // ShreddedPaper - thread local
+                    this.capturedBlockStates.get().remove(pos); // ShreddedPaper - thread local
                 }
                 // CraftBukkit end
                 return false;
@@ -1024,7 +1027,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                 */
 
                 // CraftBukkit start
-                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+                if (!this.captureBlockStates.get()) { // Don't notify clients or update physics while capturing blockstates // ShreddedPaper - thread local
                     // Modularize client and physic updates
                     // Spigot start
                     try {
@@ -1088,7 +1091,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             }
 
             // CraftBukkit start - SPIGOT-5710
-            if (!this.preventPoiUpdated) {
+            if (!this.preventPoiUpdated.get()) { // ShreddedPaper - thread local
                 this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
             }
             // CraftBukkit end
@@ -1200,8 +1203,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     @Override
     public BlockState getBlockState(BlockPos pos) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
-            CraftBlockState previous = this.capturedBlockStates.get(pos); // Paper
+        if (this.captureTreeGeneration.get()) { // ShreddedPaper - thread local
+            CraftBlockState previous = this.capturedBlockStates.get().get(pos); // Paper // ShreddedPaper - thread local
             if (previous != null) {
                 return previous.getHandle();
             }
@@ -1472,7 +1475,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public BlockEntity getBlockEntity(BlockPos blockposition, boolean validate) {
         // Paper start - Perf: Optimize capturedTileEntities lookup
         net.minecraft.world.level.block.entity.BlockEntity blockEntity;
-        if (!this.capturedTileEntities.isEmpty() && (blockEntity = this.capturedTileEntities.get(blockposition)) != null) {
+        if (!this.capturedTileEntities.get().isEmpty() && (blockEntity = this.capturedTileEntities.get().get(blockposition)) != null) { // ShreddedPaper - thread local
             return blockEntity;
         }
         // Paper end - Perf: Optimize capturedTileEntities lookup
@@ -1485,8 +1488,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
         if (!this.isOutsideBuildHeight(blockposition)) {
             // CraftBukkit start
-            if (this.captureBlockStates) {
-                this.capturedTileEntities.put(blockposition.immutable(), blockEntity);
+            if (this.captureBlockStates.get()) { // ShreddedPaper - thread local
+                this.capturedTileEntities.get().put(blockposition.immutable(), blockEntity); // ShreddedPaper - thread local
                 return;
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index 17c994a39a1b99cc7727e328ce7493d534247a21..a6609c64baaa68e53b8b2622582878670a3e7bc8 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -365,7 +365,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
             world.setBlock(blockposition1, (BlockState) state.setValue(BedBlock.PART, BedPart.HEAD), 3);
             // CraftBukkit start - SPIGOT-7315: Don't updated if we capture block states
-            if (world.captureBlockStates) {
+            if (world.captureBlockStates.get()) { // ShreddedPaper - thread local
                 return;
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 5ae3decf100d21f7d4a471c155eaf5e00e996580..23706d591cc1c1c4b5c3225878e62caea29b989d 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -413,8 +413,8 @@ public class Block extends BlockBehaviour implements ItemLike {
 
             entityitem.setDefaultPickUpDelay();
             // CraftBukkit start
-            if (world.captureDrops != null) {
-                world.captureDrops.add(entityitem);
+            if (world.captureDrops.get() != null) { // ShreddedPaper - thread local
+                world.captureDrops.get().add(entityitem); // ShreddedPaper - thread local
             } else {
                 world.addFreshEntity(entityitem);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index d262a5a6da57ef9ba9a6fe0dfbc88f577105e74f..875abf8e998b660ad84f6c22a1b9d257f0049b52 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -66,18 +66,18 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
             world.setBlock(pos, (net.minecraft.world.level.block.state.BlockState) state.cycle(SaplingBlock.STAGE), 4);
         } else {
             // CraftBukkit start
-            if (world.captureTreeGeneration) {
+            if (world.captureTreeGeneration.get()) { // ShreddedPaper - thread local
                 this.treeGrower.growTree(world, world.getChunkSource().getGenerator(), pos, state, random);
             } else {
-                world.captureTreeGeneration = true;
+                world.captureTreeGeneration.set(true); // ShreddedPaper - thread local
                 this.treeGrower.growTree(world, world.getChunkSource().getGenerator(), pos, state, random);
-                world.captureTreeGeneration = false;
-                if (world.capturedBlockStates.size() > 0) {
+                world.captureTreeGeneration.set(true); // ShreddedPaper - thread local
+                if (world.capturedBlockStates.get().size() > 0) { // ShreddedPaper - thread local
                     TreeType treeType = SaplingBlock.treeType;
                     SaplingBlock.treeType = null;
                     Location location = CraftLocation.toBukkit(pos, world.getWorld());
-                    java.util.List<BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
-                    world.capturedBlockStates.clear();
+                    java.util.List<BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.get().values()); // ShreddedPaper - thread local
+                    world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
                     StructureGrowEvent event = null;
                     if (treeType != null) {
                         event = new StructureGrowEvent(location, treeType, false, null, blocks);
diff --git a/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java b/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
index 5cb06959aeaceeb98cfee34b1df804e6642f305f..7fa724b10f89856f99956047290a08b653656554 100644
--- a/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
@@ -61,7 +61,7 @@ public class WitherSkullBlock extends SkullBlock {
     }
 
     public static void checkSpawn(Level world, BlockPos pos, SkullBlockEntity blockEntity) {
-        if (world.captureBlockStates) return; // CraftBukkit
+        if (world.captureBlockStates.get()) return; // CraftBukkit // ShreddedPaper - thread local
         if (!world.isClientSide) {
             BlockState iblockdata = blockEntity.getBlockState();
             boolean flag = iblockdata.is(Blocks.WITHER_SKELETON_SKULL) || iblockdata.is(Blocks.WITHER_SKELETON_WALL_SKULL);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 1a40dded8042b1df0b29535c2db1a9f4d1a31740..f36eb1a979abd8e72444313a1a369a1604ec0c24 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -452,7 +452,7 @@ public class LevelChunk extends ChunkAccess {
 
                 boolean flag3 = iblockdata1.hasBlockEntity();
 
-                if (!this.level.isClientSide && !this.level.isBlockPlaceCancelled) { // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
+                if (!this.level.isClientSide && !this.level.isBlockPlaceCancelled.get()) { // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent // ShreddedPaper - thread local
                     iblockdata1.onRemove(this.level, blockposition, iblockdata, flag);
                 } else if (!iblockdata1.is(block) && flag3) {
                     this.removeBlockEntity(blockposition);
@@ -462,7 +462,7 @@ public class LevelChunk extends ChunkAccess {
                     return null;
                 } else {
                     // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
-                    if (!this.level.isClientSide && doPlace && (!this.level.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) {
+                    if (!this.level.isClientSide && doPlace && (!this.level.captureBlockStates.get() || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) { // ShreddedPaper - thread local
                         iblockdata.onPlace(this.level, blockposition, iblockdata1, flag);
                     }
 
@@ -508,7 +508,7 @@ public class LevelChunk extends ChunkAccess {
     @Nullable
     public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         // CraftBukkit start
-        BlockEntity tileentity = this.level.capturedTileEntities.get(pos);
+        BlockEntity tileentity = this.level.capturedTileEntities.get().get(pos); // ShreddedPaper - thread local
         if (tileentity == null) {
             tileentity = (BlockEntity) this.blockEntities.get(pos);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 50cee0735fc22d1ba6dd1bf18218cc5b24a392bc..1d0ccc1b3fdcfd399a4a9b5783e2321c2b25ac87 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -849,13 +849,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
-        this.world.captureTreeGeneration = true;
-        this.world.captureBlockStates = true;
+        this.world.captureTreeGeneration.set(true); // ShreddedPaper - thread local
+        this.world.captureBlockStates.set(true); // ShreddedPaper - thread local
         boolean grownTree = this.generateTree(loc, type);
-        this.world.captureBlockStates = false;
-        this.world.captureTreeGeneration = false;
+        this.world.captureBlockStates.set(false); // ShreddedPaper - thread local
+        this.world.captureTreeGeneration.set(false); // ShreddedPaper - thread local
         if (grownTree) { // Copy block data to delegate
-            for (BlockState blockstate : this.world.capturedBlockStates.values()) {
+            for (BlockState blockstate : this.world.capturedBlockStates.get().values()) { // ShreddedPaper - thread local
                 BlockPos position = ((CraftBlockState) blockstate).getPosition();
                 net.minecraft.world.level.block.state.BlockState oldBlock = this.world.getBlockState(position);
                 int flag = ((CraftBlockState) blockstate).getFlag();
@@ -863,10 +863,10 @@ public class CraftWorld extends CraftRegionAccessor implements World {
                 net.minecraft.world.level.block.state.BlockState newBlock = this.world.getBlockState(position);
                 this.world.notifyAndUpdatePhysics(position, null, oldBlock, newBlock, newBlock, flag, 512);
             }
-            this.world.capturedBlockStates.clear();
+            this.world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
             return true;
         } else {
-            this.world.capturedBlockStates.clear();
+            this.world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
             return false;
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index ac11f18690434922179b61ffcc3036dea025b0cb..6d90382a5193d0d43ebed49c23eba5a5754698ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -549,15 +549,15 @@ public class CraftBlock implements Block {
         UseOnContext context = new UseOnContext(world, null, InteractionHand.MAIN_HAND, Items.BONE_MEAL.getDefaultInstance(), new BlockHitResult(Vec3.ZERO, direction, this.getPosition(), false));
 
         // SPIGOT-6895: Call StructureGrowEvent and BlockFertilizeEvent
-        world.captureTreeGeneration = true;
+        world.captureTreeGeneration.set(true); // ShreddedPaper - thread local
         InteractionResult result = BoneMealItem.applyBonemeal(context);
-        world.captureTreeGeneration = false;
+        world.captureTreeGeneration.set(false); // ShreddedPaper - thread local
 
-        if (world.capturedBlockStates.size() > 0) {
+        if (world.capturedBlockStates.get().size() > 0) { // ShreddedPaper - thread local
             TreeType treeType = SaplingBlock.treeType;
             SaplingBlock.treeType = null;
-            List<BlockState> blocks = new ArrayList<>(world.capturedBlockStates.values());
-            world.capturedBlockStates.clear();
+            List<BlockState> blocks = new ArrayList<>(world.capturedBlockStates.get().values()); // ShreddedPaper - thread local
+            world.capturedBlockStates.get().clear(); // ShreddedPaper - thread local
             StructureGrowEvent structureEvent = null;
 
             if (treeType != null) {
