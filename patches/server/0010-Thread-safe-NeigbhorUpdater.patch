From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 5 May 2024 01:31:47 +0900
Subject: [PATCH] Thread-safe NeigbhorUpdater


diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/PerThreadNeighborUpdater.java b/src/main/java/io/multipaper/shreddedpaper/threading/PerThreadNeighborUpdater.java
new file mode 100644
index 0000000000000000000000000000000000000000..e01ca0d4a18a5cea678d0fd4809291f6b7bdc731
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/PerThreadNeighborUpdater.java
@@ -0,0 +1,44 @@
+package io.multipaper.shreddedpaper.threading;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.redstone.NeighborUpdater;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Supplier;
+
+public class PerThreadNeighborUpdater implements NeighborUpdater {
+
+    private final ThreadLocal<NeighborUpdater> threadLocalNeighborUpdater;
+
+    public PerThreadNeighborUpdater(Supplier<NeighborUpdater> factory) {
+        this.threadLocalNeighborUpdater = ThreadLocal.withInitial(factory);
+    }
+
+    private NeighborUpdater getOrCreate() {
+        return threadLocalNeighborUpdater.get();
+    }
+
+    @Override
+    public void shapeUpdate(@NotNull Direction direction, @NotNull BlockState neighborState, @NotNull BlockPos pos, @NotNull BlockPos neighborPos, int flags, int maxUpdateDepth) {
+        getOrCreate().shapeUpdate(direction, neighborState, pos, neighborPos, flags, maxUpdateDepth);
+    }
+
+    @Override
+    public void neighborChanged(@NotNull BlockPos pos, @NotNull Block sourceBlock, @NotNull BlockPos sourcePos) {
+        getOrCreate().neighborChanged(pos, sourceBlock, sourcePos);
+    }
+
+    @Override
+    public void neighborChanged(@NotNull BlockState state, @NotNull BlockPos pos, @NotNull Block sourceBlock, @NotNull BlockPos sourcePos, boolean notify) {
+        getOrCreate().neighborChanged(state, pos, sourceBlock, sourcePos, notify);
+    }
+
+    @Override
+    public void updateNeighborsAtExceptFromFacing(@NotNull BlockPos pos, @NotNull Block sourceBlock, @Nullable Direction except) {
+        getOrCreate().updateNeighborsAtExceptFromFacing(pos, sourceBlock, except);
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 4beada452d014ec7dc7c167466ec2af3c5bfcd33..f2e988b6fe9cc62c3fc167afac4a41a2e3fc8d75 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -99,6 +99,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
+import io.multipaper.shreddedpaper.threading.PerThreadNeighborUpdater;
 // CraftBukkit end
 
 public abstract class Level implements LevelAccessor, AutoCloseable {
@@ -291,7 +292,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.thread = Thread.currentThread();
         this.biomeManager = new BiomeManager(this, i);
         this.isDebug = flag1;
-        this.neighborUpdater = new CollectingNeighborUpdater(this, j);
+        this.neighborUpdater = new PerThreadNeighborUpdater(() -> new CollectingNeighborUpdater(this, j)); // ShreddedPaper - thread-safe
         this.registryAccess = iregistrycustom;
         this.damageSources = new DamageSources(iregistrycustom);
         // CraftBukkit start
