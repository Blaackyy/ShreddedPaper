From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 24 May 2024 00:03:50 +0900
Subject: [PATCH] EntityLookup accessibleEntities

Use a synchronized block as data is only read rarely for debug reports

diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 15ee41452992714108efe53b708b5a4e1da7c1ff..e22012b5854c9e7725780cf8f3173949202c1472 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -191,11 +191,15 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
     @Override
     public Iterable<Entity> getAll() {
+        synchronized (this.accessibleEntities) { // ShreddedPaper
         return new ArrayIterable<>(this.accessibleEntities.getRawData(), 0, this.accessibleEntities.size());
+        } // ShreddedPaper
     }
 
     public Entity[] getAllCopy() {
+        synchronized (this.accessibleEntities) { // ShreddedPaper
         return Arrays.copyOf(this.accessibleEntities.getRawData(), this.accessibleEntities.size(), Entity[].class);
+        } // ShreddedPaper
     }
 
     @Override
@@ -277,7 +281,9 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
                     if (newVisibility.ordinal() > oldVisibility.ordinal()) {
                         // status upgrade
                         if (!oldVisibility.isAccessible() && newVisibility.isAccessible()) {
+                            synchronized (this.accessibleEntities) { // ShreddedPaper
                             this.accessibleEntities.add(entity);
+                            } // ShreddedPaper
                             EntityLookup.this.worldCallback.onTrackingStart(entity);
                         }
 
@@ -291,7 +297,9 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
                         }
 
                         if (oldVisibility.isAccessible() && !newVisibility.isAccessible()) {
+                            synchronized (this.accessibleEntities) { // ShreddedPaper
                             this.accessibleEntities.remove(entity);
+                            } // ShreddedPaper
                             EntityLookup.this.worldCallback.onTrackingEnd(entity);
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 0f90a6803851eba51e164772c984b1cd1193d882..d483c94b8afd624af4c0c165a809d3a5853ad02e 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -80,6 +80,8 @@ public final class NaturalSpawner {
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
 
+            if (entity == null) continue; // ShreddedPaper - concurrent modification
+
             if (entity instanceof Mob entityinsentient) {
                 if (entityinsentient.isPersistenceRequired() || entityinsentient.requiresCustomPersistence()) {
                     continue;
