From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 02:10:04 +0900
Subject: [PATCH] Block entities


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index 9338b86709b5d7721b8ec4576e1e0ec9a4f90bcf..3ece853609b21a65c341ae352d9f99ff2c102601 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -6,9 +6,11 @@ import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQu
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayList;
@@ -26,6 +28,8 @@ public class LevelChunkRegion {
     private final PrioritisedThreadedTaskQueue internalTasks = new PrioritisedThreadedTaskQueue(); // Read-only tasks
     private final ObjectOpenHashSet<ServerPlayer> players = new ObjectOpenHashSet<>();
     public final LongLinkedOpenHashSet unloadQueue = new LongLinkedOpenHashSet();
+    public final List<TickingBlockEntity> tickingBlockEntities = new ReferenceArrayList<>();
+    public final List<TickingBlockEntity> pendingBlockEntityTickers = new ReferenceArrayList<>();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
@@ -133,6 +137,8 @@ public class LevelChunkRegion {
                 && internalTasks.getTotalTasksExecuted() >= internalTasks.getTotalTasksScheduled()
                 && players.isEmpty()
                 && unloadQueue.isEmpty()
+                && tickingBlockEntities.isEmpty()
+                && pendingBlockEntityTickers.isEmpty()
                 ;
     }
 }
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index 343e726d1eb20ca512b5d895d03cf8c0b2643f98..9f7feef6c842b25402eebd3be4cf8364d1b5c70b 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -75,6 +75,8 @@ public class ShreddedPaperChunkTicker {
 
             region.forEachTickingEntity(ShreddedPaperEntityTicker::tickEntity);
 
+            level.tickBlockEntities(region.tickingBlockEntities, region.pendingBlockEntityTickers);
+
             region.getPlayers().forEach(ShreddedPaperPlayerTicker::tickPlayer);
 
             while (region.getInternalTaskQueue().executeTask()) ;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 0d4b59c3ad5a0efb9ea7e07c39145594ca570653..9629ea5f29667d46119e546879b36e1c8ba68c3b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -782,7 +782,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             //this.timings.entityTick.stopTiming(); // Spigot // Purpur
             //this.timings.tickEntities.stopTiming(); // Spigot // Purpur
             //gameprofilerfiller.pop(); // Purpur
-            this.tickBlockEntities();
+            // this.tickBlockEntities(); // ShreddedPaper - handled locally in the region
         }
 
         //gameprofilerfiller.push("entityManagement"); // Purpur
@@ -2229,7 +2229,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             }
 
             bufferedwriter.write(String.format(Locale.ROOT, "entities: %s\n", this.moonrise$getEntityLookup().getDebugInfo())); // Paper - rewrite chunk system
-            bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", this.blockEntityTickers.size()));
+            // bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", this.blockEntityTickers.size())); // ShreddedPaper - removed blockEntityTickers
             bufferedwriter.write(String.format(Locale.ROOT, "block_ticks: %d\n", this.getBlockTicks().count()));
             bufferedwriter.write(String.format(Locale.ROOT, "fluid_ticks: %d\n", this.getFluidTicks().count()));
             bufferedwriter.write("distance_manager: " + playerchunkmap.getDistanceManager().getDebugStatus() + "\n");
@@ -2375,14 +2375,16 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     private void dumpBlockEntityTickers(Writer writer) throws IOException {
         CsvOutput csvwriter = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("type").build(writer);
-        Iterator iterator = this.blockEntityTickers.iterator();
-
-        while (iterator.hasNext()) {
-            TickingBlockEntity tickingblockentity = (TickingBlockEntity) iterator.next();
-            BlockPos blockposition = tickingblockentity.getPos();
-
-            csvwriter.writeRow(blockposition.getX(), blockposition.getY(), blockposition.getZ(), tickingblockentity.getType());
-        }
+        // ShreddedPaper start - removed blockEntityTickers
+//        Iterator iterator = this.blockEntityTickers.iterator();
+//
+//        while (iterator.hasNext()) {
+//            TickingBlockEntity tickingblockentity = (TickingBlockEntity) iterator.next();
+//            BlockPos blockposition = tickingblockentity.getPos();
+//
+//            csvwriter.writeRow(blockposition.getX(), blockposition.getY(), blockposition.getZ(), tickingblockentity.getType());
+//        }
+        // ShreddedPaper end - removed blockEntityTickers
 
     }
 
@@ -2442,7 +2444,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public String getWatchdogStats() {
         return String.format(Locale.ROOT, "players: %s, entities: %s [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", this.players.size(), this.moonrise$getEntityLookup().getDebugInfo(), ServerLevel.getTypeCount(this.moonrise$getEntityLookup().getAll(), (entity) -> { // Paper - rewrite chunk system
             return BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()).toString();
-        }), this.blockEntityTickers.size(), ServerLevel.getTypeCount(this.blockEntityTickers, TickingBlockEntity::getType), this.getBlockTicks().count(), this.getFluidTicks().count(), this.gatherChunkSourceStats());
+        }), 0 /*this.blockEntityTickers.size()*/, "" /*ServerLevel.getTypeCount(this.blockEntityTickers, TickingBlockEntity::getType)*/, this.getBlockTicks().count(), this.getFluidTicks().count(), this.gatherChunkSourceStats()); // ShreddedPaper - removed blockEntityTickers
     }
 
     private static <T> String getTypeCount(Iterable<T> items, Function<T, String> classifier) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 1b82f8d4e35fdaa52c260948c83797a0286d10a1..377e05cd0aa366e48924838d27a93215e5e0ad5e 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -6,10 +6,13 @@ import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
+import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import io.multipaper.shreddedpaper.region.LevelChunkRegion;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -101,6 +104,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
+import io.multipaper.shreddedpaper.region.RegionPos;
 import io.multipaper.shreddedpaper.threading.PerThreadNeighborUpdater;
 // CraftBukkit end
 
@@ -117,9 +121,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public
+    // public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public // ShreddedPaper - handled locally in the region
     protected final NeighborUpdater neighborUpdater;
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    // private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList(); // ShreddedPaper - handled locally in the region
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
@@ -179,7 +183,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
-    private int tileTickPosition;
+    // private int tileTickPosition; // ShreddedPaper - removed tileTickPosition
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
     public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Faster redstone torch rapid clock removal; Move from Map in BlockRedstoneTorch to here
 
@@ -1409,18 +1413,26 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     }
 
     public void addBlockEntityTicker(TickingBlockEntity ticker) {
-        (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
+        // ShreddedPaper start
+        LevelChunkRegion region = ((ServerLevel) this).chunkSource.tickingRegions.getOrCreate(RegionPos.forChunk(new ChunkPos(ticker.getPos())));
+        synchronized (region.pendingBlockEntityTickers) {
+            region.pendingBlockEntityTickers.add(ticker);
+        }
+        // ShreddedPaper end
+//        (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker); // ShreddedPaper
     }
 
-    protected void tickBlockEntities() {
+    public void tickBlockEntities(List<TickingBlockEntity> blockEntityTickers, List<TickingBlockEntity> pendingBlockEntityTickers) { // ShreddedPaper
         //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
 
         //gameprofilerfiller.push("blockEntities"); // Purpur
         //this.timings.tileEntityPending.startTiming(); // Spigot // Purpur
         this.tickingBlockEntities = true;
-        if (!this.pendingBlockEntityTickers.isEmpty()) {
-            this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
-            this.pendingBlockEntityTickers.clear();
+        if (!pendingBlockEntityTickers.isEmpty()) { // ShreddedPaper
+            synchronized (pendingBlockEntityTickers) { // ShreddedPaper
+                blockEntityTickers.addAll(pendingBlockEntityTickers); // ShreddedPaper
+                pendingBlockEntityTickers.clear(); // ShreddedPaper
+            } // ShreddedPaper
         }
         //this.timings.tileEntityPending.stopTiming(); // Spigot // Purpur
 
@@ -1434,9 +1446,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         int tilesThisCycle = 0;
         var toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Paper - Fix MC-117075; use removeAll
         toRemove.add(null); // Paper - Fix MC-117075
-        for (tileTickPosition = 0; tileTickPosition < this.blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters
-            this.tileTickPosition = (this.tileTickPosition < this.blockEntityTickers.size()) ? this.tileTickPosition : 0;
-            TickingBlockEntity tickingblockentity = (TickingBlockEntity) this.blockEntityTickers.get(this.tileTickPosition);
+        for (int tileTickPosition = 0; tileTickPosition < blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters // ShreddedPaper
+            tileTickPosition = (tileTickPosition < blockEntityTickers.size()) ? tileTickPosition : 0; // ShreddedPaper
+            TickingBlockEntity tickingblockentity = (TickingBlockEntity) blockEntityTickers.get(tileTickPosition); // ShreddedPaper
             // Spigot end
 
             if (tickingblockentity.isRemoved()) {
@@ -1453,11 +1465,11 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
                 // Paper end - rewrite chunk system
             }
         }
-        this.blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075
+        blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075 // ShreddedPaper
 
         //this.timings.tileEntityTick.stopTiming(); // Spigot // Purpur
         this.tickingBlockEntities = false;
-        co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper
+        co.aikar.timings.TimingHistory.tileEntityTicks += blockEntityTickers.size(); // Paper // ShreddedPaper
         //gameprofilerfiller.pop(); // Purpur
         this.spigotConfig.currentPrimedTnt = 0; // Spigot
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index a4578ae22409edb686d0bcbac8cbc1a2e1d7b988..3c4e777f477aa9802879a2adba5f6561c38c7aa5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -104,7 +104,7 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
 
     public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) {
         super(pos, upgradeData, world, net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME), inhabitedTime, sectionArrayInitializer, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry
-        this.tickersInLevel = Maps.newHashMap();
+        this.tickersInLevel = Maps.newConcurrentMap(); // ShreddedPaper - use concurrent map
         this.level = (ServerLevel) world; // CraftBukkit - type
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap();
         Heightmap.Types[] aheightmap_type = Heightmap.Types.values();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 86639a4d4059bcf92dbc1af4b5eeb6547010a7b1..462fa9c5f4852289888101ea841567016952d16b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -196,7 +196,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public int getTickableTileEntityCount() {
-        return world.blockEntityTickers.size();
+        return 0; // world.blockEntityTickers.size(); // ShreddedPaper - removed blockEntityTickers
     }
 
     @Override
