From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 23 Aug 2024 01:03:30 +0900
Subject: [PATCH] Moving into another region


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6b2c2e2f782630a3b7e25532260cc61e02c8049f..b015fe3b2a7ef9a13c6f91edb7fded542e2e8604 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1176,7 +1176,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public void move(MoverType movementType, Vec3 movement) {
         final Vec3 originalMovement = movement; // Paper - Expose pre-collision velocity
         // Paper start - detailed watchdog information
-        io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
+        io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot move an entity off-main");
+        BlockPos newPos = new BlockPos((int) (this.getX() + movement.x), (int) (this.getY() + movement.y), (int) (this.getZ() + movement.z));
+        if (!TickThread.isTickThreadFor((ServerLevel) this.level, newPos)) {
+            LOGGER.warn("Trying to move {} from {} to {}!!! movement={} getDeltaMovement={}", this, this.blockPosition(), newPos, movement, this.getDeltaMovement());
+        }
         synchronized (this.posLock) {
             this.moveStartX = this.getX();
             this.moveStartY = this.getY();
@@ -2271,7 +2275,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             }
             delta = event.getKnockback();
         }
-        this.setDeltaMovement(this.getDeltaMovement().add(delta.getX(), delta.getY(), delta.getZ()));
+        // ShreddedPaper start - limit push velocity
+        Vec3 newDelta = this.getDeltaMovement().add(delta.getX(), delta.getY(), delta.getZ());
+        if (newDelta.lengthSqr() > (RegionPos.REGION_SIZE * 16 * RegionPos.REGION_SIZE * 16)) {
+            newDelta = newDelta.normalize().scale(RegionPos.REGION_SIZE * 16);
+        }
+        this.setDeltaMovement(newDelta);
+        // ShreddedPaper end - limit push velocity
         // Paper end - Add EntityKnockbackByEntityEvent and EntityPushedByEntityAttackEvent
         this.hasImpulse = true;
     }
@@ -4779,7 +4789,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return this.deltaMovement;
     }
 
+    // ShreddedPaper start - why is something setting the entity velocity to larger than one region...
+    private static final int REGION_SIZE_BLOCKS_SQR = (RegionPos.REGION_SIZE * 16) * (RegionPos.REGION_SIZE * 16) + 1;
     public void setDeltaMovement(Vec3 velocity) {
+        if (velocity.horizontalDistanceSqr() > REGION_SIZE_BLOCKS_SQR && velocity.horizontalDistanceSqr() > this.deltaMovement.horizontalDistanceSqr()) {
+            LOGGER.warn("Velocity is being set larger than the ShreddedPaper region size: {} for entity {}", velocity, this, new Exception("Velocity larger than region size"));
+        }
+    // ShreddedPaper end - why is something setting the entity velocity to larger than one region...
         synchronized (this.posLock) { // Paper
         this.deltaMovement = velocity;
         } // Paper
