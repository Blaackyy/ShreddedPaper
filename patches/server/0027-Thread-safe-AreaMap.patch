From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 30 May 2024 17:43:14 +0900
Subject: [PATCH] Thread-safe AreaMap


diff --git a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
index 091b1ae822e1c0517e59572e7a9bda11e998c0ee..e6a46b9902a9c9b546bfb62de37d0c6cfdab4b82 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
@@ -1,5 +1,6 @@
 package com.destroystokyo.paper.util.misc;
 
+import io.multipaper.shreddedpaper.util.SimpleStampedLock;
 import io.papermc.paper.util.IntegerUtil;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
@@ -33,6 +34,8 @@ public abstract class AreaMap<E> {
     protected final ChangeCallback<E> removeCallback;
     protected final ChangeSourceCallback<E> changeSourceCallback;
 
+    protected final SimpleStampedLock lock = new SimpleStampedLock(); // ShreddedPaper - Multi-threaded access
+
     public AreaMap() {
         this(new PooledLinkedHashSets<>());
     }
@@ -54,37 +57,48 @@ public abstract class AreaMap<E> {
 
     @Nullable
     public final PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E> getObjectsInRange(final long key) {
-        return this.areaMap.get(key);
+        return this.lock.optimisticRead(() -> this.areaMap.get(key)); // ShreddedPaper - Multi-threaded access
     }
 
     @Nullable
     public final PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E> getObjectsInRange(final ChunkPos chunkPos) {
-        return this.areaMap.get(MCUtil.getCoordinateKey(chunkPos));
+        return this.lock.optimisticRead(() -> this.areaMap.get(MCUtil.getCoordinateKey(chunkPos))); // ShreddedPaper - Multi-threaded access
     }
 
     @Nullable
     public final PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E> getObjectsInRange(final int chunkX, final int chunkZ) {
-        return this.areaMap.get(MCUtil.getCoordinateKey(chunkX, chunkZ));
+        return this.lock.optimisticRead(() -> this.areaMap.get(MCUtil.getCoordinateKey(chunkX, chunkZ))); // ShreddedPaper - Multi-threaded access
     }
 
     // Long.MIN_VALUE indicates the object is not mapped
     public final long getLastCoordinate(final E object) {
-        return this.objectToLastCoordinate.getOrDefault(object, Long.MIN_VALUE);
+        return this.lock.optimisticRead(() -> this.objectToLastCoordinate.getOrDefault(object, Long.MIN_VALUE)); // ShreddedPaper - Multi-threaded access
     }
 
     // -1 indicates the object is not mapped
     public final int getLastViewDistance(final E object) {
-        return this.objectToViewDistance.getOrDefault(object, -1);
+        return this.lock.optimisticRead(() -> this.objectToViewDistance.getOrDefault(object, -1)); // ShreddedPaper - Multi-threaded access
     }
 
     // returns the total number of mapped chunks
     public final int size() {
-        return this.areaMap.size();
+        return this.lock.optimisticRead(this.areaMap::size); // ShreddedPaper - Multi-threaded access
     }
 
     public final void addOrUpdate(final E object, final int chunkX, final int chunkZ, final int viewDistance) {
-        final int oldViewDistance = this.objectToViewDistance.put(object, viewDistance);
+        // ShreddedPaper start - Don't recalculate if not needed
         final long newPos = MCUtil.getCoordinateKey(chunkX, chunkZ);
+        try {
+            final int oldViewDistance = this.objectToViewDistance.getInt(object);
+            final long oldPos = this.objectToLastCoordinate.getLong(object);
+            if (oldViewDistance == viewDistance && oldPos == newPos) {
+                return; // no change, don't recalculate
+            }
+        } catch (Exception ignored) { /* Probably just a concurrent modification error */ }
+        // ShreddedPaper end - Don't recalculate if not needed
+        this.lock.write(() -> { // ShreddedPaper - Multi-threaded access
+        final int oldViewDistance = this.objectToViewDistance.put(object, viewDistance);
+        // final long newPos = MCUtil.getCoordinateKey(chunkX, chunkZ); // ShreddedPaper - moved up
         final long oldPos = this.objectToLastCoordinate.put(object, newPos);
 
         if (oldViewDistance == -1) {
@@ -95,20 +109,33 @@ public abstract class AreaMap<E> {
             this.updateObjectCallback(object, oldPos, newPos, oldViewDistance, viewDistance);
         }
         //this.validate(object, viewDistance);
+        }); // ShreddedPaper - Multi-threaded access
     }
 
     public final boolean update(final E object, final int chunkX, final int chunkZ, final int viewDistance) {
+        // ShreddedPaper start - Don't recalculate if not needed
+        final long newPos = MCUtil.getCoordinateKey(chunkX, chunkZ);
+        try {
+            final int oldViewDistance = this.objectToViewDistance.getInt(object);
+            final long oldPos = this.objectToLastCoordinate.getLong(object);
+            if (oldViewDistance == viewDistance && oldPos == newPos) {
+                return false; // no change, don't recalculate
+            }
+        } catch (Exception ignored) { /* Probably just a concurrent modification error */ }
+        // ShreddedPaper end - Don't recalculate if not needed
+        return this.lock.write(() -> { // ShreddedPaper - Multi-threaded access
         final int oldViewDistance = this.objectToViewDistance.replace(object, viewDistance);
         if (oldViewDistance == -1) {
             return false;
         } else {
-            final long newPos = MCUtil.getCoordinateKey(chunkX, chunkZ);
+            // final long newPos = MCUtil.getCoordinateKey(chunkX, chunkZ); // ShreddedPaper - moved up
             final long oldPos = this.objectToLastCoordinate.put(object, newPos);
             this.updateObject(object, oldPos, newPos, oldViewDistance, viewDistance);
             this.updateObjectCallback(object, oldPos, newPos, oldViewDistance, viewDistance);
         }
         //this.validate(object, viewDistance);
         return true;
+        }); // ShreddedPaper - Multi-threaded access
     }
 
     // called after the distance map updates
@@ -119,6 +146,7 @@ public abstract class AreaMap<E> {
     }
 
     public final boolean add(final E object, final int chunkX, final int chunkZ, final int viewDistance) {
+        return this.lock.write(() -> { // ShreddedPaper - Multi-threaded access
         final int oldViewDistance = this.objectToViewDistance.putIfAbsent(object, viewDistance);
         if (oldViewDistance != -1) {
             return false;
@@ -132,12 +160,14 @@ public abstract class AreaMap<E> {
         //this.validate(object, viewDistance);
 
         return true;
+        }); // ShreddedPaper - Multi-threaded access
     }
 
     // called after the distance map updates
     protected void addObjectCallback(final E object, final int chunkX, final int chunkZ, final int viewDistance) {}
 
     public final boolean remove(final E object) {
+        return this.lock.write(() -> { // ShreddedPaper - Multi-threaded access
         final long position = this.objectToLastCoordinate.removeLong(object);
         final int viewDistance = this.objectToViewDistance.removeInt(object);
 
@@ -152,6 +182,7 @@ public abstract class AreaMap<E> {
         this.removeObjectCallback(object, currentX, currentZ, viewDistance);
         //this.validate(object, -1);
         return true;
+        }); // ShreddedPaper - Multi-threaded access
     }
 
     // called after the distance map updates
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java b/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
index e51104e65a07b6ea7bbbcbb6afb066ef6401cc5b..ba1e9413cee8f9b12023d21567384aa9420b7fc4 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
@@ -24,7 +24,7 @@ public class PooledLinkedHashSets<E> {
         return;
     }
 
-    public PooledObjectLinkedOpenHashSet<E> findMapWith(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public synchronized PooledObjectLinkedOpenHashSet<E> findMapWith(final PooledObjectLinkedOpenHashSet<E> current, final E object) { // ShreddedPaper - Multi-threaded access
         final PooledObjectLinkedOpenHashSet<E> cached = current.getAddCache(object);
 
         if (cached != null) {
@@ -76,7 +76,7 @@ public class PooledLinkedHashSets<E> {
     }
 
     // rets null if current.size() == 1
-    public PooledObjectLinkedOpenHashSet<E> findMapWithout(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public synchronized PooledObjectLinkedOpenHashSet<E> findMapWithout(final PooledObjectLinkedOpenHashSet<E> current, final E object) { // ShreddedPaper - Multi-threaded access
         if (current.set.size() == 1) {
             decrementReferenceCount(current);
             return null;
