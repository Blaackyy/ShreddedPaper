From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 21 May 2024 23:54:30 +0900
Subject: [PATCH] mpmap debug command


diff --git a/src/main/java/io/multipaper/shreddedpaper/commands/MPMapCommand.java b/src/main/java/io/multipaper/shreddedpaper/commands/MPMapCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..522a0a5e6aecd7c624cc589df4001092cc79a0d8
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/commands/MPMapCommand.java
@@ -0,0 +1,47 @@
+package io.multipaper.shreddedpaper.commands;
+
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.ChunkPos;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+public class MPMapCommand extends MapCommandBase {
+
+    public MPMapCommand(String command) {
+        super(command);
+        setPermission("shreddedpaper.command.mpmap");
+    }
+
+    @Override
+    protected ChunkStatus getStatus(Player player, ChunkPos chunkPos) {
+        NewChunkHolder newChunkHolder = ((ServerLevel) ((CraftPlayer) player).getHandle().level()).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(chunkPos.x, chunkPos.z);
+
+        NamedTextColor color;
+        String name;
+
+        if (newChunkHolder == null) {
+            color = NamedTextColor.DARK_GRAY;
+            name = "Unloaded";
+        } else if (newChunkHolder.getChunkStatus() == FullChunkStatus.INACCESSIBLE) {
+            color = NamedTextColor.GRAY;
+            name = "Inaccessible";
+        } else if (newChunkHolder.getChunkStatus() == FullChunkStatus.FULL) {
+            color = NamedTextColor.WHITE;
+            name = "Full";
+        } else if (newChunkHolder.getChunkStatus() == FullChunkStatus.BLOCK_TICKING) {
+            color = NamedTextColor.BLUE;
+            name = "Block Ticking";
+        } else if (newChunkHolder.getChunkStatus() == FullChunkStatus.ENTITY_TICKING) {
+            color = NamedTextColor.AQUA;
+            name = "Entity Ticking";
+        } else {
+            color = NamedTextColor.RED;
+            name = "Unknown";
+        }
+
+        return new ChunkStatus(color, name);
+    }
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/commands/MapCommandBase.java b/src/main/java/io/multipaper/shreddedpaper/commands/MapCommandBase.java
new file mode 100644
index 0000000000000000000000000000000000000000..da00cc8e1cc540b5d042996837b4f546b2b361cb
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/commands/MapCommandBase.java
@@ -0,0 +1,93 @@
+package io.multipaper.shreddedpaper.commands;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.event.HoverEvent;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.world.level.ChunkPos;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
+import java.util.Objects;
+
+public abstract class MapCommandBase extends Command {
+
+    public MapCommandBase(String command) {
+        super(command);
+    }
+
+    protected abstract ChunkStatus getStatus(Player player, ChunkPos chunkPos);
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, String[] args) {
+        if (!testPermission(sender)) return false;
+
+        if (!(sender instanceof Player player)) {
+            sender.sendMessage(ChatColor.RED + "Only players can execute this command.");
+            return false;
+        }
+
+        sendMap(player);
+
+        return true;
+    }
+
+    protected void sendMap(Player player) {
+        sendMap(player, 8);
+    }
+
+    protected void sendMap(Player player, int radius) {
+        sendHeader(player, radius);
+        for (int row = -radius; row <= radius; row++) {
+            sendRow(player, radius, row);
+        }
+        sendHeader(player, radius);
+    }
+
+    private ChunkStatus getStatus(Player player, int x, int z) {
+        return getStatus(player, new ChunkPos(((CraftPlayer) player).getHandle().blockPosition().offset(x << 4, 0, z << 4)));
+    }
+
+    private void sendRow(Player player, int radius, int row) {
+        Component component = Component.text(" | ").color(NamedTextColor.GOLD);
+
+        int i = -radius;
+        while (i <= radius) {
+            StringBuilder builder = new StringBuilder();
+            ChunkStatus status = getStatus(player, i, row);
+
+            while (i <= radius) {
+                ChunkStatus status2 = getStatus(player, i, row);
+
+                if (!Objects.equals(status, status2)) {
+                    break;
+                }
+
+                builder.append(row == 0 && i == 0 ? "\u25A0 " : "+ ");
+
+                i++;
+            }
+
+            Component innerComponent = Component.text(builder.toString()).color(status.color());
+
+            if (status.description() != null) {
+                innerComponent = innerComponent.hoverEvent(HoverEvent.showText(Component.text(status.description()).color(status.color())));
+            }
+
+            component = component.append(innerComponent);
+        }
+
+        component = component.append(Component.text("| ").color(NamedTextColor.GOLD));
+        player.sendMessage(component);
+    }
+
+    private void sendHeader(Player player, int radius) {
+        player.sendMessage(Component.text("+ " + "- ".repeat(radius * 2 + 1) + "+").color(NamedTextColor.GOLD));
+    }
+
+    protected record ChunkStatus(NamedTextColor color, @Nullable String description) {};
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/commands/ShreddedPaperCommands.java b/src/main/java/io/multipaper/shreddedpaper/commands/ShreddedPaperCommands.java
new file mode 100644
index 0000000000000000000000000000000000000000..4dd39bce7ed93bf96cc893cc5e3cf539f44763fe
--- /dev/null
+++ b/src/main/java/io/multipaper/shreddedpaper/commands/ShreddedPaperCommands.java
@@ -0,0 +1,26 @@
+package io.multipaper.shreddedpaper.commands;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.Command;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class ShreddedPaperCommands {
+
+    private static final Map<String, Command> COMMANDS = new HashMap<>();
+    static {
+        for (Command command : new Command[] {
+                new MPMapCommand("mpmap")
+        }) {
+            COMMANDS.put(command.getName(), command);
+        }
+    }
+
+    public static void registerCommands(final MinecraftServer server) {
+        COMMANDS.forEach((s, command) -> {
+            server.server.getCommandMap().register(s, "shreddedpaper", command);
+        });
+    }
+
+}
diff --git a/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java b/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java
index 53dcfbdf38f007fc86064ac1a495288d5f25f598..89436f82a49d69f3bd21195bf44dfc4fa9bd4df7 100644
--- a/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java
+++ b/src/main/java/io/multipaper/shreddedpaper/permissions/ShreddedPaperCommandPermissions.java
@@ -1,6 +1,7 @@
 package io.multipaper.shreddedpaper.permissions;
 
 import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
 import org.bukkit.util.permissions.DefaultPermissions;
 import org.jetbrains.annotations.NotNull;
 
@@ -11,6 +12,7 @@ public class ShreddedPaperCommandPermissions {
     public static void registerPermissions(@NotNull Permission parent) {
         Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all ShreddedPaper commands", parent);
 
+        DefaultPermissions.registerPermission(PREFIX + "mpmap", "MPMap command", PermissionDefault.TRUE, commands);
 
         commands.recalculatePermissibles();
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 2762f54515b352271feb4b26f506b06cd0fb1909..96a00a91f639b74883e053e6ef2c93aa810e84e9 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -71,6 +71,7 @@ import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
+import io.multipaper.shreddedpaper.commands.ShreddedPaperCommands;
 // CraftBukkit end
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -248,6 +249,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        ShreddedPaperCommands.registerCommands(this); // ShreddedPaper
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
         gg.pufferfish.pufferfish.PufferfishConfig.pufferfishFile = (java.io.File) options.valueOf("pufferfish-settings"); // Purpur
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
