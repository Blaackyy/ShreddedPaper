From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 25 May 2024 13:07:30 +0900
Subject: [PATCH] TrackedEntity


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index 7330767f84228619bc5a4c03ce2783a3e74818d8..875648bd826c60cba129c72f39aa35bed3434f5a 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -14,6 +14,7 @@ import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
 
@@ -23,6 +24,7 @@ public class LevelChunkRegion {
     private final RegionPos regionPos;
     private final List<LevelChunk> levelChunks = new ArrayList<>(RegionPos.REGION_SIZE * RegionPos.REGION_SIZE);
     private final IteratorSafeOrderedReferenceSet<Entity> tickingEntities = new IteratorSafeOrderedReferenceSet<>(); // Use IteratorSafeOrderedReferenceSet to maintain entity tick order
+    private final Set<Entity> trackedEntities = new ObjectOpenHashSet<>();
     private final ConcurrentLinkedQueue<DelayedTask> scheduledTasks = new ConcurrentLinkedQueue<>(); // Writable tasks
     private final PrioritisedThreadedTaskQueue internalTasks = new PrioritisedThreadedTaskQueue(); // Read-only tasks
     private final ObjectOpenHashSet<ServerPlayer> players = new ObjectOpenHashSet<>();
@@ -68,6 +70,22 @@ public class LevelChunkRegion {
         }
     }
 
+    public synchronized void addTrackedEntity(Entity entity) {
+        if (!this.trackedEntities.add(entity)) {
+            throw new IllegalStateException("Tried to add an entity that was already tracked: " + entity);
+        }
+    }
+
+    public synchronized void removeTrackedEntity(Entity entity) {
+        if (!this.trackedEntities.remove(entity)) {
+            throw new IllegalStateException("Tried to remove an entity that wasn't already tracked: " + entity);
+        }
+    }
+
+    public synchronized void forEachTrackedEntity(Consumer<Entity> action) {
+        this.trackedEntities.forEach(action);
+    }
+
     public ServerLevel getLevel() {
         return level;
     }
@@ -138,6 +156,7 @@ public class LevelChunkRegion {
                 && unloadQueue.isEmpty()
                 && tickingBlockEntities.isEmpty()
                 && pendingBlockEntityTickers.isEmpty()
+                && trackedEntities.isEmpty()
                 ;
     }
 }
diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
index bff6f98036e74a9716649b71a60c9f9d7d5278d3..52c7ce154c4cef680143f635d99d162bdac569c4 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
@@ -96,6 +96,41 @@ public class LevelChunkRegionMap {
         }
     }
 
+    public void addTrackedEntity(Entity entity) {
+        if (entity.previousTrackedChunkPosRegion != null) {
+            throw new IllegalStateException("Entity is already tracked " + entity);
+        }
+
+        entity.previousTrackedChunkPosRegion = entity.chunkPosition();
+        getOrCreate(RegionPos.forChunk(entity.chunkPosition())).addTrackedEntity(entity);
+    }
+
+    public void removeTrackedEntity(Entity entity) {
+        if (entity.previousTrackedChunkPosRegion == null) {
+            throw new IllegalStateException("Entity is not being tracked " + entity);
+        }
+
+        getOrCreate(RegionPos.forChunk(entity.previousTrackedChunkPosRegion)).removeTrackedEntity(entity);
+        entity.previousTrackedChunkPosRegion = null;
+    }
+
+    public void moveTrackedEntity(Entity entity) {
+        if (entity.previousTrackedChunkPosRegion == null) {
+            // Not tracked, ignore
+            return;
+        }
+
+        ChunkPos newChunkPos = entity.chunkPosition();
+        RegionPos fromRegion = RegionPos.forChunk(entity.previousTrackedChunkPosRegion);
+        RegionPos toRegion = RegionPos.forChunk(newChunkPos);
+
+        if (!fromRegion.equals(toRegion)) {
+            entity.previousTrackedChunkPosRegion = newChunkPos;
+            getOrCreate(fromRegion).removeTrackedEntity(entity);
+            getOrCreate(toRegion).addTrackedEntity(entity);
+        }
+    }
+
     /**
      * Schedule a task to run on the given region's thread at the beginning of the next tick
      */
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index 28e33ccfdf064a67185135da53e40ea575f6574a..1b7bd6f07b86c42eb845bcfb8fab3a1f64bf3a5a 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -82,6 +82,8 @@ public class ShreddedPaperChunkTicker {
 
             region.forEachTickingEntity(ShreddedPaperEntityTicker::tickEntity);
 
+            region.forEachTrackedEntity(ShreddedPaperEntityTicker::processTrackQueue);
+
             level.tickBlockEntities(region.tickingBlockEntities, region.pendingBlockEntityTickers);
 
             region.getPlayers().forEach(ShreddedPaperPlayerTicker::tickPlayer);
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperEntityTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperEntityTicker.java
index 051084e44759febef79a5b5606967e677699b951..29b823763c01ee5ff6f9c09c848ed2895bf495bb 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperEntityTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperEntityTicker.java
@@ -1,8 +1,11 @@
 package io.multipaper.shreddedpaper.threading;
 
+import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 
+import java.util.Objects;
+
 public class ShreddedPaperEntityTicker {
 
     public static void tickEntity(Entity entity) {
@@ -35,4 +38,9 @@ public class ShreddedPaperEntityTicker {
         }
     }
 
+    public static void processTrackQueue(Entity entity) {
+        ChunkMap.TrackedEntity tracker = Objects.requireNonNull(entity.tracker);
+        tracker.updatePlayers(entity.getPlayersInTrackRange());
+        tracker.serverEntity.sendChanges();
+    }
 }
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 29613c4d48f90c5e355a8b4f9b76c459c7b02c6c..f6a01cbe8871bc6d0f5992730c70d34c184d718e 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1111,6 +1111,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
                     entity.tracker = playerchunkmap_entitytracker; // Paper - Fast access to tracker
                     this.entityMap.put(entity.getId(), playerchunkmap_entitytracker);
+                    this.level.getChunkSource().tickingRegions.addTrackedEntity(entity); // ShreddedPaper
                     playerchunkmap_entitytracker.updatePlayers(entity.getPlayersInTrackRange()); // Paper - don't search all players
                     if (entity instanceof ServerPlayer) {
                         ServerPlayer entityplayer = (ServerPlayer) entity;
@@ -1148,6 +1149,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         ChunkMap.TrackedEntity playerchunkmap_entitytracker1 = (ChunkMap.TrackedEntity) this.entityMap.remove(entity.getId());
 
         if (playerchunkmap_entitytracker1 != null) {
+            this.level.getChunkSource().tickingRegions.removeTrackedEntity(entity); // ShreddedPaper - only remove if it actually existed
             playerchunkmap_entitytracker1.broadcastRemoved();
         }
         entity.tracker = null; // Paper - We're no longer tracked
@@ -1155,6 +1157,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     // Paper start - optimised tracker
     private final void processTrackQueue() {
+        if (true) return; // ShreddedPaper - handle ourselves
         //this.level.timings.tracker1.startTiming(); // Purpur
         try {
             for (TrackedEntity tracker : this.entityMap.values()) {
@@ -1228,7 +1231,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     public void broadcast(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId());
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker = entity.tracker; // (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId()); // ShreddedPaper - don't use map
 
         if (playerchunkmap_entitytracker != null) {
             playerchunkmap_entitytracker.broadcast(packet);
@@ -1237,7 +1240,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     protected void broadcastAndSend(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId());
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker = entity.tracker; // (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId()); // ShreddedPaper - don't use map
 
         if (playerchunkmap_entitytracker != null) {
             playerchunkmap_entitytracker.broadcastAndSend(packet);
@@ -1334,7 +1337,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper start - use distance map to optimise tracker
         com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> lastTrackerCandidates;
 
-        final void updatePlayers(com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> newTrackerCandidates) {
+        public final void updatePlayers(com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> newTrackerCandidates) { // ShreddedPaper - make public
             com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> oldTrackerCandidates = this.lastTrackerCandidates;
             this.lastTrackerCandidates = newTrackerCandidates;
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 55508dd52c9dedd9ef44ce08dc62a129d8f178a1..5ba89a75bfcfd9f3d28e5bf25cbfeb7eded4cc3a 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -2910,6 +2910,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         public void onSectionChange(Entity entity) {
             entity.updateDynamicGameEventListener(DynamicGameEventListener::move);
             ServerLevel.this.chunkSource.tickingRegions.moveTickingEntity(entity); // ShreddedPaper - move ticking entity into the new region
+            ServerLevel.this.chunkSource.tickingRegions.moveTrackedEntity(entity); // ShreddedPaper - move tracked entity into the new region
             if (entity instanceof ServerPlayer serverPlayer) ServerLevel.this.chunkSource.tickingRegions.movePlayer(serverPlayer); // ShreddedPaper - move player into the new region
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6b89a13729c32d2b8ba1c11e1dd56c9e900ada43..a755ea41486e5850014b133a1cdd455574742fdc 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -110,7 +110,6 @@ import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
-import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -134,7 +133,6 @@ import net.minecraft.world.scores.Team;
 import org.slf4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
-import org.bukkit.Server;
 import org.bukkit.block.BlockFace;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.event.CraftPortalEvent;
@@ -343,6 +341,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public double yOld;
     public double zOld;
     public @Nullable ChunkPos previousTickingChunkPosRegion; // ShreddedPaper
+    public @Nullable ChunkPos previousTrackedChunkPosRegion; // ShreddedPaper
     public float maxUpStep; // Purpur
     public boolean noPhysics;
     public final RandomSource random;
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index dff0e7b08b973a1b29f916e63d3e4778d6c56cdc..eb27ea55c02b586ca2a7d97e6caf39fb81459056 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -114,7 +114,7 @@ public class PrimedTnt extends Entity implements TraceableEntity {
              */
             // Send position and velocity updates to nearby players on every tick while the TNT is in water.
             // This does pretty well at keeping their clients in sync with the server.
-            net.minecraft.server.level.ChunkMap.TrackedEntity ete = ((net.minecraft.server.level.ServerLevel)this.level()).getChunkSource().chunkMap.entityMap.get(this.getId());
+            net.minecraft.server.level.ChunkMap.TrackedEntity ete = this.tracker; // ((net.minecraft.server.level.ServerLevel)this.level()).getChunkSource().chunkMap.entityMap.get(this.getId()); // ShreddedPaper - don't use map
             if (ete != null) {
                 net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket velocityPacket = new net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket(this);
                 net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket positionPacket = new net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket(this);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index bd60758e8291821c66bd82a5d23682959b915136..dc3c49ea458d334560dd3f99b66eaf969c888353 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2004,7 +2004,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(CraftSound.bukkitToMinecraftHolder(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, seed);
-        ChunkMap.TrackedEntity entityTracker = this.getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
+        ChunkMap.TrackedEntity entityTracker = craftEntity.getHandle().tracker; // this.getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId()); // ShreddedPaper - don't use map
         if (entityTracker != null) {
             entityTracker.broadcastAndSend(packet);
         }
@@ -2016,7 +2016,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, seed);
-        ChunkMap.TrackedEntity entityTracker = this.getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
+        ChunkMap.TrackedEntity entityTracker = craftEntity.getHandle().tracker; // this.getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId()); // ShreddedPaper - don't use map
         if (entityTracker != null) {
             entityTracker.broadcastAndSend(packet);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 67d7eede1543599497cd31b7de308e1caf952a08..8bdb226269e931d31d3876a10f24f4e7810d4aae 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -724,7 +724,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         ImmutableSet.Builder<Player> players = ImmutableSet.builder();
 
         ServerLevel world = ((CraftWorld) this.getWorld()).getHandle();
-        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(this.getEntityId());
+        ChunkMap.TrackedEntity entityTracker = this.getHandle().tracker; // world.getChunkSource().chunkMap.entityMap.get(this.getEntityId()); // ShreddedPaper - don't use map
 
         if (entityTracker != null) {
             for (ServerPlayerConnection connection : entityTracker.seenBy) {
@@ -1028,7 +1028,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         }
 
         ServerLevel world = ((CraftWorld) this.getWorld()).getHandle();
-        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(this.getEntityId());
+        ChunkMap.TrackedEntity entityTracker = this.getHandle().tracker; // world.getChunkSource().chunkMap.entityMap.get(this.getEntityId()); // ShreddedPaper - don't use map
 
         if (entityTracker == null) {
             return;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index c12484e13ff2b06b9bad7c5b2bbf9e82c1cbc989..27ff2b3037a90ee94bea767c285f2454e545aad2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2052,7 +2052,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private void unregisterEntity(Entity other) {
         // Paper end
         ChunkMap tracker = ((ServerLevel) this.getHandle().level()).getChunkSource().chunkMap;
-        ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
+        ChunkMap.TrackedEntity entry = other.tracker; // tracker.entityMap.get(other.getId()); // ShreddedPaper - don't use map
         if (entry != null) {
             entry.removePlayer(this.getHandle());
         }
@@ -2149,7 +2149,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             if (original != null) otherPlayer.setUUID(original); // Paper - uuid override
         }
 
-        ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
+        ChunkMap.TrackedEntity entry = other.tracker; // tracker.entityMap.get(other.getId()); // ShreddedPaper - don't use map
         if (entry != null && !entry.seenBy.contains(this.getHandle().connection)) {
             entry.updatePlayer(this.getHandle());
         }
