From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 5 Jun 2024 20:01:02 +0900
Subject: [PATCH] Block events


diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
index df82710cd48f1adeeff7a5b5922606285013abd3..bbd874c5bdef8415075a290bca4b903ffa19b1fd 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegion.java
@@ -5,20 +5,25 @@ import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadedTaskQu
 
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.BlockEventData;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
 
 public class LevelChunkRegion {
 
@@ -34,6 +39,7 @@ public class LevelChunkRegion {
     public final List<TickingBlockEntity> tickingBlockEntities = new ReferenceArrayList<>();
     public final List<TickingBlockEntity> pendingBlockEntityTickers = new ReferenceArrayList<>();
     private final ObjectOpenHashSet<Mob> navigatingMobs = new ObjectOpenHashSet<>();
+    private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents = new ObjectLinkedOpenHashSet<>();
 
     public LevelChunkRegion(ServerLevel level, RegionPos regionPos) {
         this.level = level;
@@ -162,6 +168,26 @@ public class LevelChunkRegion {
         toRun.forEach(DelayedTask::run);
     }
 
+    public synchronized void addBlockEvent(BlockEventData blockEvent) {
+        this.blockEvents.add(blockEvent);
+    }
+
+    public synchronized void addAllBlockEvents(Collection<BlockEventData> blockEvents) {
+        this.blockEvents.addAll(blockEvents);
+    }
+
+    public boolean hasBlockEvents() {
+        return !this.blockEvents.isEmpty();
+    }
+
+    public synchronized BlockEventData removeFirstBlockEvent() {
+        return this.blockEvents.removeFirst();
+    }
+
+    public synchronized void removeBlockEventsIf(Predicate<BlockEventData> predicate) {
+        this.blockEvents.removeIf(predicate);
+    }
+
     public boolean isEmpty() {
         return tickingChunks.isEmpty()
                 && tickingEntities.size() == 0
@@ -173,6 +199,7 @@ public class LevelChunkRegion {
                 && pendingBlockEntityTickers.isEmpty()
                 && trackedEntities.isEmpty()
                 && navigatingMobs.isEmpty()
+                && blockEvents.isEmpty()
                 ;
     }
 }
diff --git a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
index 3b77254f09bf9172c2de8a1fc3cec83e0ca641a3..59576497d2432fc4ea97b6070e4daefac03d41e3 100644
--- a/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
+++ b/src/main/java/io/multipaper/shreddedpaper/region/LevelChunkRegionMap.java
@@ -6,10 +6,12 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.level.BlockEventData;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
 import io.multipaper.shreddedpaper.threading.ShreddedPaperRegionLocker;
 import io.multipaper.shreddedpaper.util.SimpleStampedLock;
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -199,6 +201,24 @@ public class LevelChunkRegionMap {
         }
     }
 
+    public void addBlockEvent(BlockEventData blockEvent) {
+        getOrCreate(RegionPos.forBlockPos(blockEvent.pos())).addBlockEvent(blockEvent);
+    }
+
+    public void forEachRegionInBoundingBox(BoundingBox box, Consumer<LevelChunkRegion> consumer) {
+        RegionPos minPos = RegionPos.forBlockPos(box.minX(), box.minZ(), box.minZ());
+        RegionPos maxPos = RegionPos.forBlockPos(box.maxX(), box.maxZ(), box.maxZ());
+
+        for (int x = minPos.x; x <= maxPos.x; x++) {
+            for (int z = minPos.z; z <= maxPos.z; z++) {
+                LevelChunkRegion region = get(new RegionPos(x, z));
+                if (region != null) {
+                    consumer.accept(region);
+                }
+            }
+        }
+    }
+
     public List<Mob> collectRelevantNavigatingMobs(RegionPos regionPos) {
         if (!level.chunkScheduler.getRegionLocker().hasLock(regionPos)) {
             // We care about the navigating mobs in at least this region, ensure it's locked
diff --git a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
index ce09bb29910788f14127a4d64cfe601386199d98..61e10aac82906caaca741315b4a46146e8bed840 100644
--- a/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
+++ b/src/main/java/io/multipaper/shreddedpaper/threading/ShreddedPaperChunkTicker.java
@@ -73,6 +73,8 @@ public class ShreddedPaperChunkTicker {
 
             region.forEachTickingChunk(chunk -> _tickChunk(level, chunk, spawnercreature_d));
 
+            level.runBlockEvents(region);
+
             region.forEachTickingEntity(ShreddedPaperEntityTicker::tickEntity);
 
             region.forEachTrackedEntity(ShreddedPaperEntityTicker::processTrackQueue);
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index e4a196e7b9a52ef85788933ca1b9801cf94ded9f..13b95bebe3b805d09b7388283dfc6ad166351ac1 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -7,6 +7,7 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import io.multipaper.shreddedpaper.region.LevelChunkRegion;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -15,7 +16,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.io.BufferedWriter;
 import java.io.IOException;
@@ -126,7 +126,6 @@ import net.minecraft.world.level.biome.BiomeSource;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.SnowLayerBlock;
-import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
@@ -137,7 +136,6 @@ import net.minecraft.world.level.chunk.storage.RegionStorageInfo;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityTickList;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.entity.LevelEntityGetter;
@@ -210,8 +208,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     final Set<Mob> navigatingMobs;
     final ThreadLocal<Boolean> isUpdatingNavigations = ThreadLocal.withInitial(() -> false); // ShreddedPaper - make thread local
     protected final Raids raids;
-    private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents;
-    private final List<BlockEventData> blockEventsToReschedule;
+    // private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents; // ShreddedPaper - moved into each region
+    private final ThreadLocal<List<BlockEventData>> blockEventsToRescheduleThreadLocal; // ShreddedPaper
     private boolean handlingTick;
     private final List<CustomSpawner> customSpawners;
     @Nullable
@@ -519,8 +517,8 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         this.fluidTicks = new LevelTicksRegionProxy<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier()); // ShreddedPaper
         this.pathTypesByPosCache = new PathTypeCache();
         this.navigatingMobs = new ObjectOpenHashSet();
-        this.blockEvents = new ObjectLinkedOpenHashSet();
-        this.blockEventsToReschedule = new ArrayList(64);
+        // this.blockEvents = new ObjectLinkedOpenHashSet(); // ShreddedPaper - moved into each region
+        this.blockEventsToRescheduleThreadLocal = ThreadLocal.withInitial(() -> new ArrayList(64)); // ShreddedPaper
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
         this.server = minecraftserver;
@@ -714,7 +712,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         //gameprofilerfiller.popPush("blockEvents"); // Purpur
         if (flag) {
             // this.timings.doSounds.startTiming(); // Spigot // Purpur
-            this.runBlockEvents();
+            // this.runBlockEvents(); // ShreddedPaper - handled locally in the region
             // this.timings.doSounds.stopTiming(); // Spigot // Purpur
         }
 
@@ -1889,25 +1887,26 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     @Override
     public void blockEvent(BlockPos pos, Block block, int type, int data) {
-        this.blockEvents.add(new BlockEventData(pos, block, type, data));
+        this.chunkSource.tickingRegions.addBlockEvent(new BlockEventData(pos, block, type, data)); // ShreddedPaper
     }
 
-    private void runBlockEvents() {
-        this.blockEventsToReschedule.clear();
+    public void runBlockEvents(LevelChunkRegion region) { // ShreddedPaper
+        List<BlockEventData> blockEventsToReschedule = blockEventsToRescheduleThreadLocal.get(); // ShreddedPaper
+        blockEventsToReschedule.clear(); // ShreddedPaper
 
-        while (!this.blockEvents.isEmpty()) {
-            BlockEventData blockactiondata = (BlockEventData) this.blockEvents.removeFirst();
+        while (region.hasBlockEvents()) { // ShreddedPaper
+            BlockEventData blockactiondata = (BlockEventData) region.removeFirstBlockEvent(); // ShreddedPaper
 
             if (this.shouldTickBlocksAt(blockactiondata.pos())) {
                 if (this.doBlockEvent(blockactiondata)) {
                     this.server.getPlayerList().broadcast((Player) null, (double) blockactiondata.pos().getX(), (double) blockactiondata.pos().getY(), (double) blockactiondata.pos().getZ(), 64.0D, this.dimension(), new ClientboundBlockEventPacket(blockactiondata.pos(), blockactiondata.block(), blockactiondata.paramA(), blockactiondata.paramB()));
                 }
             } else {
-                this.blockEventsToReschedule.add(blockactiondata);
+                blockEventsToReschedule.add(blockactiondata); // ShreddedPaper
             }
         }
 
-        this.blockEvents.addAll(this.blockEventsToReschedule);
+        region.addAllBlockEvents(blockEventsToReschedule); // ShreddedPaper
     }
 
     private boolean doBlockEvent(BlockEventData event) {
@@ -2391,9 +2390,13 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     @VisibleForTesting
     public void clearBlockEvents(BoundingBox box) {
-        this.blockEvents.removeIf((blockactiondata) -> {
-            return box.isInside(blockactiondata.pos());
+        // ShreddedPaper start - moved blockEvents into regions
+        this.getLevel().getChunkSource().tickingRegions.forEachRegionInBoundingBox(box, region -> {
+            region.removeBlockEventsIf((blockactiondata) -> {
+                return box.isInside(blockactiondata.pos());
+            });
         });
+        // ShreddedPaper end - moved blockEvents into regions
     }
 
     @Override
